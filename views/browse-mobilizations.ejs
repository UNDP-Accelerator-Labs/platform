<!DOCTYPE html>
<html lang='<%- locals.metadata.page.lang %>'>
<head>

	<%- include ('partials/head.ejs') %> 

</head>

<body>
<!-- INCLUDE MULTI-LANGUAGE VOCABULARY FOR ejs -->
<%- include ('partials/multi-language.ejs') %> 
<%- include ('partials/menu-languages.ejs') %> 
<%# include ('partials/menu-filters.ejs') %> 
<%- include ('partials/menu-logo.ejs') %> 


<div class='browse'>
	<%- include ('partials/navigate.ejs') %> 
	<nav>
		<ul>
			<li class='<% if (locals.metadata.page.space === "ongoing") { %>active<% } %>'>
				<a href='./ongoing'>
					<!-- TO DO: TRANSLATE -->
					<button>Ongoing mobilizations<div class='count'><%- locals.stats.ongoing %></div></button>
				</a>
			</li>
			<li class='<% if (locals.metadata.page.space === "past") { %>active<% } %>'>
				<a href='./past'>
					<button>Past mobilizations<div class='count'><%- locals.stats.past %></div></button>
				</a>	
			</li>
		</ul>
	</nav>
	<main>
		<div class='inner'>
		</div>
	</main>
</div>

<footer>
</footer>



<script type='text/javascript'>
	
	// const main = d3.select('main')
	// 	.call(multiSelection, { class: '.template.visible .inner', filter: d => d.editable })
	const main = d3.select('div.browse main')
	
	const mobilizationsLayout = main.select('.inner')
	const overview = mobilizationsLayout.select('.overview')
	
	const queryparams = <%- JSON.stringify(locals.metadata.page.query) %>;
	var lang = '<%- locals.metadata.page.lang %>'; // THIS NEEDS TO BE A GLOBAL VARIABLE
	const rights = <%- locals.metadata.user.rights %>;

	let page = <%- locals.metadata.page.id %>;
	var lazyloading = false

	function renderStats (counts) {
		// THIS IS THE META INFORMATION
		const stats = overview.addElems('div', 'summary-statistics', [counts])

		const count = stats.addElems('div', 'statistic count')
		.addElems('h1')
			.html(d => d.filtered)
		count.addElems('small')
			.html(d => `/ ${d.total}`)
		count.addElems('br')
		count.addElems('small', 'light')
			.html(d => vocabulary['cohort']['<%- locals.metadata.page.lang %>'](d.total !== 1))
	}	


	function renderSections (data, counts) {
		// MAKE SURE WE ONLY KEEP THE SECTIONS WHERE THERE ARE PADS
		// data = data.filter(d => counts.map(c => c.status).includes(d.status))
		const sections = mobilizationsLayout.addElems('section', 'mobilizations-container', data)
		// sections.addElems('div', 'pub-status')
		// 	.addElems('label')
		// 	.html(d => {
		// 		const count = counts.find(c => c.status === d.status).count
		// 		return vocabulary['cohort status']['<%- locals.metadata.page.lang %>'](count, d.status)
		// 	})
		sections.addElems('div', 'mobilizations-layout')
			.each(function (d) {
				const section = d3.select(this)
				// section.classed(d.label, true)
				d.mobilizations.forEach(p => section.call(renderVignette, p))
			})
	}

	function renderVignette (section, data) {
		const mobilizations = section.addElem('div', 'mobilization')
			.datum(data)
		.each(function (d) {
			d3.select(this).classed(`status-${d.status}`, true)
		}).addElems('div', 'inner')
		
		const head = mobilizations.addElems('div', 'head')
		const body = mobilizations.addElems('div', 'body')
		const foot = mobilizations.addElems('div', 'foot')

		const metagroup = head.addElems('div', 'meta-group')
		metagroup.addElems('div', 'meta meta-contributor')
			.addElems('a')
			.attr('href', d => `?countries=${d.country_id}`)
			.html(d => `<% if (locals.metadata.page.space === 'private') { %>${d.contributorname}<% } else { %>${d.country}<% } %>`)
		
		metagroup.addElems('div', 'btn-group')
		.addElems('form', 'actions', function (d) {
			const opts = []
			console.log(d)
			// opts.push({ node: 'button', type: 'button', label: 'Contribute' })
			// opts.push({ action: '../browse/pads/private', method: 'GET', node: 'button', type: 'submit', label: 'Browse contributions', name: 'mobilizations', value: d.id })
			// opts.push({ node: 'button', type: 'submit', label: 'Browse contributions', name: 'mobilizations', value: d.id })
			// TO DO: TERMINATE DEPLOYMENT
			// if (d.editable) opts.push({ node: 'button', type: 'button', label: 'Delete', fn: deleteMobilizations })
			// if (d.status === 1) 
			
			// opts.push({ action: '../../analyse/mobilization', method: 'GET', node: 'button', type: 'submit', disabled: d.pads === 0, label: 'View' })
			opts.push({ node: 'button', type: 'button', disabled: d.pads === 0, label: 'Download', fn: download })
			if (d.status === 1) opts.push({ action: '/demobilize', method: 'GET', node: 'button', type: 'submit', disabled: !(d.editable && d.status === 1), label: 'Demobilize' })
			return opts
		}).attrs({ 'action': d => d.action, 'method': d => d.method })
		.each(function (d) {
			const sel = d3.select(this)
			const mobilization = sel.findAncestor('mobilization')
			sel.addElems('input')
				.attrs({ 'type': 'hidden', 'name': 'id', 'value': mobilization.datum().id })
			sel.addElems(d.node, 'btn-overlay')
				.classed(d.label.toLowerCase(), true)
				// .attrs({ 'type': d.type, 'name': d.name, 'value': d.value })
				.attrs({ 'type': d.type, 'disabled': d.disabled || null })
				.html(d => d.label)
			.on('click', _ => d.fn ? d.fn(mobilization.datum().id) : null)
		})


		const title = body.addElems('div', 'media media-title')
			.addElems('a', 'mobilization-link')
			.attrs({ 'href': d => d.editable ? `../../edit/mobilization?id=${d.id}` : `../../view/mobilization?id=${d.id}`, 'target': 'blank' })
			.addElems('h1')
		title.addElems('img')
			.attr('src', '/imgs/icons/i-mobilize.svg')
		title.addElems('span').html(d => d.title || `[${vocabulary['untitled template']['<%- locals.metadata.page.lang %>']}]`)

		const template_title = body.addElem('div', 'media media-txt')
			.attr('data-placeholder', '<%- vocabulary["untitled template"][locals.metadata.page.lang] %>')
		template_title.addElems('i').html(d => 'This mobilization uses the template: ')// TO DO: TRANSLATE
		template_title.addElems('a')
			.attrs({ 'href': d => `../../edit/template?id=${d.template_id}`, 'target': '_blank' })
			.html(d => d.template_title)
		
		body.addElems('div', 'meta meta-date')
			.html(d => { // TO DO: TRANSLATE
				let txt = `Deployed on ${d.start_date}`
				if (d.end_date) txt += `, ended on ${d.end_date}`
				return txt
			})

		const stats = foot.addElem('div', 'meta meta-group')
		const contributors = stats.addElem('div', 'meta meta-stats')
			.addElems('a', 'disabled') // TO DO: THIS IS TEMP WHILE WE CANNOT EDIT MOBILIZATIONS
		.addElems('h1')
			.html(d => d.contributors - 1)
		contributors.addElems('small', 'light')
			.html(d => 'contributors') // TO DO: TRANSLATE

		const contributions = stats.addElem('div', 'meta meta-stats')
			.addElems('a')
			.classed('disabled', d => !d.pads)
			.attr('href', d => `../../browse/pads/public?mobilizations=${d.id}`)
		.addElems('h1')
			.html(d => d.pads)
		contributions.addElems('small', 'light')
			.html(d => 'contributions') // TO DO: TRANSLATE
	}



	window.onscroll = async function (ev) { // TO DO: UPDATE THIS
		if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight && !lazyloading) {
			console.log('hit the bottom')
			main.select('.lds-ellipsis').classed('hide', false)
			
			page ++
			lazyloading = true
			
			// const searchData = new FormData(searchForm.node()) // TO DO: REINTEGRATE THIS IF A FILTER MENU IS ADDED
			const obj = {}
			obj.page = page
			obj.view = queryparams.view
			// searchData.forEach((v, k) => !['type', 'query'].includes(k) ? obj[k] ? obj[k].push(v) : obj[k] = [v] : obj[k] = v)

			const response = await POST('', obj) // NO TARGET NEEDED SINCE SAME AS CURRENT PAGE

			d3.selectAll('section.mobilizations-container div.mobilizations-layout')
			.each(function (d) {
				const section = d3.select(this)
				response.sections.find(s => s.status === d.status).mobilizations.forEach(p => section.call(renderVignette, p))
			})

			if (response.count < <%- locals.stats.filtered %>) lazyloading = false
			else main.select('.lds-ellipsis').classed('hide', true)
		}
	}

	async function deleteMobilizations (mobilizations) {
		const data = mobilizations.data()
		const message = `Do you really want to delete the following ${data.length > 1 ? data.length : ''} template${data.length > 1 ? 's' : ''}: <strong>${data.map(d => d.title || '<%- vocabulary["untitled template"][locals.metadata.page.lang] %>').join('</strong>, <strong>')}</strong>? <br/><small>* This operation cannot be undone.</small>` // TO DO: TRANSLATE
		const form = { action: '/delete/mobilizations',  method: 'GET' }
		const opts = [{ node: 'button', type: 'submit', label: `Delete ${data.length > 1 ? 'them' : 'it'}`, resolve: true }]
		data.forEach(d => opts.unshift({ node: 'input', type: 'hidden', name: 'id', value: d.id }))

		renderFormModal({ message: message, formdata: form, opts: opts })
	}
	async function unpublish (ids) {
		if (!ids) ids = data.filter(d => d.status === 2).map(d => d.id)
		return await POST('/unpublish', { type: 'mobilizations', ids: ids })
	}

	async function download (id) {
		console.log(id)
		// let headline = vocabulary['download all']['<%- locals.metadata.page.lang %>']
		
		// if (!['bookmarks', 'private'].includes(source)) {
		// 	source = source.datum().id // IF A SINGLE SOLUTION, EXTRACT id
		// 	vocabulary['download']['<%- locals.metadata.page.lang %>']
		// }
		// const opts = [
		// 	{ node: 'button', type: 'button', label: 'raw data', resolve: 'raw' }, 
		// 	// { node: 'button', type: 'button', label: 'as .pdf', resolve: 'pdf' } // TO DO
		// ]
		// const format = await renderPromiseModal({ headline: headline, opts: opts })
		const res = await POST(`/download/mobilization`, { id: id }, false)
		const a = document.createElement('a')
		res.blob().then(b => {
			var url = window.URL.createObjectURL(b)
			a.href = url
			a.download = `mobilization_${id}_${(new Date(Date.now())).display_for_query()}.zip`
			a.click()
			window.URL.revokeObjectURL(url)
			a.remove()
		})
	}

	window.addEventListener('keyup', function (e) {
		e = e || event
		if (e.key === 'Escape' || e.keyCode === 27) d3.selectAll('.modal').remove()
	})


	window.onload = function () {
		// renderStats(<%- JSON.stringify(locals.stats) %>)
		renderSections(<%- JSON.stringify(locals.sections) %>, <%- JSON.stringify(locals.stats.breakdown) %>)
	}


</script>

</body>
</html>