<!DOCTYPE html>
<html lang='<%- locals.metadata.page.lang %>'>
<head>

<%- include ('partials/head.ejs') %> 

</head>

<body>
<!-- INCLUDE MULTI-LANGUAGE VOCABULARY FOR ejs -->
<%- include ('partials/multi-language.ejs') %> 

<%- include ('partials/menu-languages.ejs') %> 
<%- include ('partials/menu-filters.ejs') %> 
<%- include ('partials/modals.ejs') %> 

<%- include ('partials/menu-logo.ejs') %> 
<div class='browse'>
	<%- include ('partials/navigate.ejs') %> 
	<nav>
		<ul>
			<% if (locals.metadata.user.rights > 0) { %>
				<li class='<% if (locals.metadata.page.space === "private") { %>active<% } %>'>
					<a href='./private'>
						<button><%- vocabulary['private'][locals.metadata.page.lang] %><div class='count'><%- locals.stats.privatecount %></div></button>
					</a>	
				</li>
			<% } %>
			<li class='<% if (locals.metadata.page.space === "public") { %>active<% } %>'>
				<a href='./public'>
					<button><%- vocabulary['public'][locals.metadata.page.lang] %><div class='count'><%- locals.stats.publiccount %></div></button>
				</a>
			</li>
			<!-- <% if (locals.metadata.page.object === 'pads') { %>
				<a href='./bookmarks'>
					<li class='<% if (locals.metadata.page.space === "bookmarks") { %>active<% } %>'><%- vocabulary['bookmarks'][locals.metadata.page.lang] %></li>
				</a>
			<% } %> -->
		</ul>
		<!-- TO DO: TRANSLATE -->
		<% if (locals.metadata.page.query) { %>
			<p>Search yielded <strong><%- locals.stats.filtered %></strong> results</p>
		<% } %>
	</nav>
	<main>
		<div class='inner'>
		</div>
		<div class='lds-ellipsis hide'><div></div><div></div><div></div><div></div></div>
	</main>
</div>
<%- include ('partials/filters.ejs') %>

<footer>
	<div class='inner'>
		<!-- IF PAGE IS BELOW 5, SHOW FIRST 10 -->
		<!-- IF IT IS ABOVE 5, CENTER WINDOW OF 10 AROUND PAGE -->
		<% if (!locals.metadata.page.lazyload) { %>
			<ul class='pagination'>
			<% if (locals.metadata.page.id <= 2) { %>
				<% for (let i = 1; i < Math.min(4, locals.metadata.page.count + 1); i++) { %>
					<li>
						<a class='page-link <% if (i === locals.metadata.page.id) { %>active<% } %>' data-page='<%- i %>'><%- i %></a>
					</li>
				<% } %>
				<% if (locals.metadata.page.count > 3) { %>
					<li>…</li>
					<li>
						<a class='page-link' data-page='<%- locals.metadata.page.count %>'><%- locals.metadata.page.count %></a>
					</li>
				<% } %>
			<% } else if (locals.metadata.page.id > 2 && locals.metadata.page.id <= (locals.metadata.page.count + 1) - 3) { %>
				<li>
					<a class='page-link' data-page='<%- 1 %>'>1</a>
				</li>
				<li>…</li>
				<% for (let i = locals.metadata.page.id - 1; i < locals.metadata.page.id + 2; i++) { %>
					<li>
						<a class='page-link <% if (i === locals.metadata.page.id) { %>active<% } %>' data-page='<%- i %>'><%- i %></a>
					</li>
				<% } %>
				<li>…</li>
				<li>
					<a class='page-link' data-page='<%- locals.metadata.page.count %>'><%- locals.metadata.page.count %></a>
				</li>
			<% } else { %>
				<li>
					<a class='page-link' data-page='<%- 1 %>'>1</a>
				</li>
				<li>…</li>
				<% for (let i = locals.metadata.page.count - 2; i < locals.metadata.page.count + 1; i++) { %>
					<li>
						<a class='page-link <% if (i === locals.metadata.page.id) { %>active<% } %>' data-page='<%- i %>'><%- i %></a>
					</li>
				<% } %>
			<% } %>
			</ul>
		<% } %>
	</div>
</footer>



<script type='text/javascript'>
	const main = d3.select('div.browse main')
		// .call(multiSelection, { class: '.pad.visible .inner', filter: d => d.editable })
	const layout = main.select('div.inner')
	const overview = layout.select('section.overview')
	
	let data = <%- JSON.stringify(locals.pads) %>;

	const queryparams = <%- JSON.stringify(locals.metadata.page.query) %>;

	let page = <%- locals.metadata.page.id %>;
	var lazyloading = false

	const publication_limit = 5
	

	function renderStats (data, counts) {
		// THIS IS THE META INFORMATION
		const stats = overview.addElems('div', 'summary-statistics', [counts])

		const count = stats.addElems('div', 'statistic count')
		.addElems('h1')
			.html(d => d.filtered)
		count.addElems('small')
			.html(d => `/ ${d.total}`)
		count.addElems('br')
		count.addElems('small', 'light')
			.html(d => vocabulary['pad']['<%- locals.metadata.page.lang %>'](d.total !== 1))
		const contributors = stats.addElems('div', 'statistic contributors')
		.addElems('h2', 'lg')
			.html(d => d.contributors)
		contributors.addElems('small')
		contributors.addElems('br')
		contributors.addElems('small', 'light')
			.html(d => vocabulary['contributor']['<%- locals.metadata.page.lang %>'](d !== 1))
	}

	function renderSections (data, counts) {
		// MAKE SURE WE ONLY KEEP THE SECTIONS WHERE THERE ARE PADS
		// data = data.filter(d => counts.map(c => c.status).includes(d.status))
		
		const sections = layout.addElems('section', 'pads-container', data)
		
		// sections.addElems('div', 'pub-status')
		// 	.addElems('div')
		// 	.html(d => {
		// 		const count = counts.find(c => c.status === d.status).count
		// 		return vocabulary['pad publication status']['<%- locals.metadata.page.lang %>'](count, d.status)
		// 	})
		// // FOR PUBLISHABLE PADS, PUBLISH ALL
		// const publishall = sections.addElems('div', 'input-group publish', d => {
		// 	return d.status === 1 && <%- locals.publications %> < publication_limit ? [d] : []
		// }).addElems('form')
		// 	.attrs({ 'action': '/publish/pads', 'method': 'GET' })
		// publishall.addElems('input')
		// 	.attrs({ 'type': 'hidden', 'name': 'limit', 'value': publication_limit - <%- locals.publications %> })
		// publishall.addElems('button')
		// 	.attr('type', 'submit')
		// .each(function () {
		// 	const sel = d3.select(this)
		// 	sel.addElems('i', 'material-icons').html('publish')
		// 	sel.addElems('label').html(vocabulary['publish all']['<%- locals.metadata.page.lang %>'])
		// })
		// // FOR BOOKMARKED PADS, DOWNLOAD ALL
		// sections.addElems('div', 'input-group download', d => '<%- locals.metadata.page.space %>' === 'bookmarks' ? [d] : [])
		// 	.addElems('form')
		// .addElems('button')
		// 	.attr('type', 'button')
		// .each(function () {
		// 	const sel = d3.select(this)
		// 	sel.addElems('i', 'material-icons').html('download')
		// 	sel.addElems('label').html(vocabulary['download all']['<%- locals.metadata.page.lang %>'])
		// }).on('click', _ => downloadPads('bookmarks'))

		sections.addElems('div', 'pads-layout')
		.each(function (d) {
			const section = d3.select(this)
			// THIS IS WHERE THE GROUPING SHOULD HAPPEN FOR FOLLOW UPS AND FORWARDS
			console.log(d.pads)
			console.log(d.pads.nest('source_id'))
			d.pads.forEach(p => section.call(renderVignette, p))
		})
	}

	function renderVignette (section, data) {
		function getImg (d) {
			if (d && d.sections) {
				const media = d.sections.map(c => c.items.map(b => b.type === 'group' ? b.items.flat() : b).flat()).flat()
				const img = media.find(c => c.type === 'img' && c.src)
				const mosaic = media.find(c => c.type === 'mosaic' && c.srcs[0])
				const embed = media.find(c => c.type === 'embed' && c.src)
				if (img) return [`/${img.src.replace('uploads', 'uploads/sm')}`]
				else if (mosaic) return [`/${mosaic.srcs[0].replace('uploads', 'uploads/sm')}`]
				else if (embed) return [`/${embed.src.replace('uploads', 'uploads/sm')}`]
				else return []
			} else return []
		}
		function getSDGs (d) {
			if (d && d.sections) {
				const sdgs = d.sections.map(c => c.items.map(b => b.type === 'group' ? b.items.flat() : b).flat())
					.flat().find(c => c.type === 'sdgs')
				if (sdgs) return [sdgs.sdgs]
				else return []
			} else return []
		}
		function getTags(d) {
			if (d && d.sections) {
				const tags = d.sections.map(c => c.items.map(b => b.type === 'group' ? b.items.flat() : b).flat())
					.flat().flat().find(c => c.type === 'tags')
				if (tags) return [tags.tags.filter(c => c.name && c.name !== '').map(c => c.name)]
				else return []
			} else return []
		}
		function getTxt (d) {
			if (d && d.sections) {
				const media = d.sections.map(c => c.items.map(b => b.type === 'group' ? b.items.flat() : b).flat()).flat()
				const txt = media.find(c => c.type === 'txt' && c.txt.length)
				if (txt) return [txt.txt]
				else return []
			} else return []
		}


		const pads = section.addElem('div', 'pad')
			.datum(data)
		.each(function (d) {
			d3.select(this).classed(`status-${d.status}`, true)
		}).addElems('div', 'inner')
		
		const head = pads.addElems('div', 'head')
		const body = pads.addElems('div', 'body')
		const foot = pads.addElems('div', 'foot')

		const metagroup = head.addElems('div', 'meta-group')
		metagroup.addElems('div', 'meta meta-contributor')
			.addElems('a')
			.attr('href', d => `?countries=${d.country_id}`)
			.html(d => `<% if (locals.metadata.page.space === 'private') { %>${d.contributorname}<% } else { %>${d.country}<% } %>`)

		metagroup.addElems('div', 'btn-group')
		.addElems('form', 'actions', function (d) {
			// console.log(d)
			const opts = []
			// THE FIRST LINE IS IF WE SELECT MULTIPLE PADS
			// TO DO: UNPUBLISH
			if ('<%- locals.metadata.page.space %>' === 'private' && d.editable) opts.push({ node: 'button', type: 'button', label: 'Delete', fn: deletePads })
			opts.push({ node: 'button', type: 'button', label: 'Download', disabled: d.status !== 2, fn: downloadPads })
			// if ('<%- locals.metadata.page.space %>' === 'private') opts.push({ action: '/publish/pads', method: 'GET', node: 'button', type: 'submit', disabled: !(d.editable && d.status === 1 && <%- locals.publications %> < publication_limit), label: 'Publish' })
			// CHANGED THE LOGIC HERE FOR THE PUBLICATION LIMIT
			if ('<%- locals.metadata.page.space %>' === 'private') opts.push({ action: '/publish/pads', method: 'GET', node: 'button', type: 'submit', disabled: !(d.editable && d.status === 1 && d.available_publications > 0), label: 'Publish' })
			return opts
		}).attrs({ 'action': d => d.action, 'method': d => d.method })
		.each(function (d) {
			const sel = d3.select(this)
			const pad = sel.findAncestor('pad')
			sel.addElems('input')
				.attrs({ 'type': 'hidden', 'name': 'id', 'value': pad.datum().id })
			sel.addElems(d.node, 'btn-overlay')
				.classed(d.label.toLowerCase(), true)
				.attrs({ 'type': d.type, 'disabled': d.disabled || null })
				.html(d.label)
			.on('click', _ => d.fn ? d.fn(pad) : null)
		})

		const title = body.addElems('div', 'media media-title')
			.addElems('a', 'pad-link')
			.attrs({ 
				'href': d => {
					if (d.editable) {
						if (d.source) return `../../edit/pad?id=${d.id}&source=${d.source}`
						else return `../../edit/pad?id=${d.id}`
					} else {
						if (d.source) return `../../view/pad?id=${d.id}&source=${d.source}`
						else return `../../view/pad?id=${d.id}`
					}
				}, 'target': '_blank'
			})
			.addElems('h1')
		title.addElems('img')
			.attr('src', '/imgs/icons/i-pad.svg')
		title.addElems('span').html(d => d.title || `[${vocabulary['untitled pad']['<%- locals.metadata.page.lang %>']}]`)
		
		if (data.followups) {
			console.log(data.followups)
			const dropdown = body.addElems('div', 'create follow-up')
			dropdown.addElems('button')
				.html('Follow-up') // TO DO: TRANSLATE
			dropdown.addElems('div', 'drop-down')
				.addElems('ul')
			.addElems('li', null, d => d.followups)
			.addElems('a')
				.attrs({ 'href': d => `../../contribute/pad?source=${d.source}&template=${d.template}&mobilization=${d.id}`, 'target': '_blank' })
				.addElems('button')
			.html(d => d.title)

			// TO DO: THIS NEEDS TO KEEP REFERENCE TO THE PAD BEING FOLLOWED UP AND THE NEW TEMPLATED PAD TO BE FILLED IN
		}

		if (data.forwards) {
			const dropdown = body.addElems('div', 'create forward')
				dropdown.addElems('button')
					.html('Forward to') // TO DO: TRANSLATE
				dropdown.addElems('div', 'drop-down')
					.addElems('ul')
				.addElems('li', null, d => d.forwards)
				.addElems('a')
					.attrs({ 'href': d => `/forward/pad?id=${d.source}&mobilization=${d.id}` }) // TO DO: CHECK THIS WORKS
					.addElems('button')
				.html(d => d.title)
		}


		body.addElems('div', 'media media-txt', d => getTxt(d).map(c => { return { id: d.id, editable: d.editable, txt: c } }))
			.addElems('a', 'pad-link')
			// .attrs({ 'href': d => d.editable ? `../../edit/pad?id=${d.id}` : `../../view/pad?id=${d.id}`, 'target': '_blank' })
			.attrs({ 
				'href': d => {
					if (d.editable) {
						if (d.source) return `../../edit/pad?id=${d.id}&source=${d.source}`
						else return `../../edit/pad?id=${d.id}`
					} else {
						if (d.source) return `../../view/pad?id=${d.id}&source=${d.source}`
						else return `../../view/pad?id=${d.id}`
					}
				}, 'target': '_blank'
			})
			.html(d => {
					if (d.txt.length > 500) return `${d.txt.slice(0, 500)}… <span class='read-more'>[Read more]</span>`
					else return d.txt
			})
		body.addElems('div', 'meta meta-date')
			.html(d => d.date)

		const taggroup = body.addElems('div', 'tag-group')
		taggroup.addElems('div', 'meta meta-tags', d => getTags(d))
			.addElems('a', 'tag-link', d => d)
			.attr('href', d => `?thematic_areas=${d}`)
		.addElems('div', 'tag')
			.addElems('label')
			// .attr('title', d => d.capitalize())
			// .html(d => d.length <= 12 ? d.capitalize() : `${d.slice(0, 12).capitalize()}…`)
			.html(d => d.capitalize())
		const sdgs = taggroup.addElems('div', 'meta meta-sdgs', d => getSDGs(d))
		sdgs.addElems('span')
			.html(d => `${vocabulary['SDG']['<%- locals.metadata.page.lang %>'](d.length > 1)}:`)
		sdgs.addElems('a', 'sdg-link', d => d)
			.attr('href', d => `?sdgs=${d.key || d}`)
			.html(d => d.key || d)
		
		// WE SEPARATE BOOKMARKS FROM THE OTHER TYPES OF ENGAGEMENT
		// media.addElems('div', 'bookmark', d => d.status === 2 ? [{ type: 'bookmark', active: d.bookmarked, pad: d.id }] : [])
		// 	.classed('active', d => d.active)
		// .on('click', async function (d) {
		// 	const result = await POST('/engage', { pad: d.pad, active: !d.active, type: d.type })
		// 	d.active = result.bool
		// 	d3.select(this).classed('active', d.active)
		// 		.select('div')
		// 		.html(vocabulary['bookmark'](d.active))
		// }).addElems('div', 'label')
		// 	.html(d => vocabulary['bookmark']['<%- locals.metadata.page.lang %>'](d.active))
		
		foot.addElems('div', 'media media-img', d => getImg(d))
			.addElems('a', 'pad-link')
			// .attrs({ 'href': d => d.editable ? `../../edit/pad?id=${d.id}` : `../../view/pad?id=${d.id}`, 'target': '_blank' })
			.attrs({ 
				'href': d => {
					if (d.editable) {
						if (d.source) return `../../edit/pad?id=${d.id}&source=${d.source}`
						else return `../../edit/pad?id=${d.id}`
					} else {
						if (d.source) return `../../view/pad?id=${d.id}&source=${d.source}`
						else return `../../view/pad?id=${d.id}`
					}
				}, 'target': '_blank'
			})
		.addElems('img', 'vignette')
			.attrs({ 'loading': 'lazy', 'alt': d => vocabulary['missing image']['<%- locals.metadata.page.lang %>'] })
		.each(function (d) {
			const node = this
			const img = new Image()
			img.onload = function () { node.src = this.src }
			img.src = d
		})
		
		// metaR1.addElems('div', 'meta meta-engagement')
		// 	.addElems('button', 'engagement', d => {
		// 		const opts = []
		// 		opts.push({ type: 'inspiration', count: d.inspirations, active: d.inspired, pad: d.id }) // HAS BEEN FOUND INSPIRATIONAL BY n USERS AND IS ACTIVE FOR CURRENT USER
		// 		opts.push({ type: 'approval', count: d.approvals, active: d.approved, pad: d.id }) // HAS BEEN APPROVED BY n USERS AND IS ACTIVE FOR CURRENT USER
		// 		opts.push({ type: 'flag', count: d.flags, active: d.flagged, pad: d.id }) // HAS BEEN FLAGGED FOR TOMORROW BY n USERS AND IS ACTIVE FOR CURRENT USER
		// 		return d.status === 2 ? opts : []
		// 	}).classed('active', d => d.active)
		// 	.attr('data-count', d => d.count)
		// .on('click', async function (d) {
		// 	const sel = d3.select(this)
		// 	if (d.type === 'approval') {
		// 		if (!d.active) {
		// 			const message = 'Describe in a few sentences how you tested and validated this solution.' // TO DO: TRANSLATE
		// 			const form = { action: '/validate',  method: 'POST' }
		// 			const opts = []
		// 			opts.push({ node: 'input', type: 'hidden', name: 'pad', value: d.pad })
		// 			opts.push({ node: 'input', type: 'hidden', name: 'active', value: !d.active })
		// 			opts.push({ node: 'input', type: 'hidden', name: 'type', value: d.type })
		// 			opts.push({ node: 'input', type: 'hidden', name: 'path', value: new URL(window.location) })
		// 			opts.push({ node: 'textarea', name: 'message', placeholder: 'What did you do?' }) // TO DO: TRANSLATE
		// 			const foot = { node: 'button', type: 'submit', label: 'Validate the solution' } // TO DO: TRANSLATE
		// 			renderFormModal({ message: message, formdata: form, opts: opts, foot: foot })
		// 		}
		// 	} else {
		// 		const result = await POST('/engage', { pad: d.pad, active: !d.active, type: d.type })
		// 		d.active = result.bool
		// 		d.count = d.active ? d.count + 1 : d.count - 1
		// 		sel.classed('active', d.active)
		// 			.attr('data-count', d.count)
		// 	}
		// }).addElems('i', 'material-icons-outlined')
		// 	.html(d => {
		// 		if (d.type === 'bookmark') return 'bookmark'
		// 		else if (d.type === 'inspiration') return 'wb_sunny'
		// 		else if (d.type === 'approval') return 'thumb_up'
		// 		else if (d.type === 'flag') return '()'
		// 	})

	}

	// THIS IS THE LAZY LOADING MECHANISM
	if (<%- JSON.parse(locals.metadata.page.lazyload) %>) {
		window.onscroll = async function (ev) {
			if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight && !lazyloading) {
				console.log('hit the bottom')
				main.select('.lds-ellipsis').classed('hide', false)
				
				page ++
				lazyloading = true
				
				const url = new URL(window.location)
				const queryparams = new URLSearchParams(url.search)
				queryparams.set('page', page)

				const response = await GET(`?${queryparams.toString()}`) // NO TARGET NEEDED SINCE SAME AS CURRENT PAGE

				d3.selectAll('section.pads-container div.pads-layout')
				.each(function (d) {
					const section = d3.select(this)
					response.sections.find(s => s.status === d.status).pads.forEach(p => section.call(renderVignette, p))
				})

				if (response.count < <%- locals.stats.filtered %>) lazyloading = false
				else main.select('.lds-ellipsis').classed('hide', true)
			}
		}
	} else { // PAGINATION MECHANISM
		d3.selectAll('.pagination a.page-link').each(function () {
			const sel = d3.select(this)
			const url = new URL(window.location)
			const queryparams = new URLSearchParams(url.search)
			queryparams.set('page', +sel.attr('data-page'))
			sel.attr('href', `?${queryparams.toString()}`)
		})
	}

	async function deletePads (pads) {
		const data = pads.data()
		const message = `Do you really want to delete the following ${data.length > 1 ? data.length : ''} solution${data.length > 1 ? 's' : ''}: <strong>${data.map(d => d.title || '<%- vocabulary["untitled solution"][locals.metadata.page.lang] %>').join('</strong>, <strong>')}</strong>? <br/><small>* This operation cannot be undone.</small>` // TO DO: TRANSLATE
		const form = { action: '/delete/pads',  method: 'GET' }
		const opts = [{ node: 'button', type: 'submit', label: `Delete ${data.length > 1 ? 'them' : 'it'}` }]
		data.forEach(d => opts.unshift({ node: 'input', type: 'hidden', name: 'id', value: d.id }))

		renderFormModal({ message: message, formdata: form, opts: opts })
	}
	async function downloadPads (source) {
		alert('sorry this feature is not yet available')
		// if (source !== 'bookmarks') source = source.datum().id // IF A SINGLE SOLUTION, EXTRACT id
		// const headline = source === 'bookmarks' ? vocabulary['download all']['<%- locals.metadata.page.lang %>'] : vocabulary['download']['<%- locals.metadata.page.lang %>']
		// const opts = [
		// 	{ node: 'button', type: 'button', label: 'raw data', resolve: 'raw' }, 
		// 	// { node: 'button', type: 'button', label: 'as .pdf', resolve: 'pdf' } // TO DO
		// ]
		// const format = await renderPromiseModal({ headline: headline, opts: opts })
		// const res = await POST(`/download/${format}`, { source: source }, false)

		// const a = document.createElement('a')
		// res.blob().then(b => {
		// 	var url = window.URL.createObjectURL(b)
		// 	a.href = url
		// 	a.download = `solutions_${(new Date(Date.now())).display_for_query()}.zip`
		// 	a.click()
		// 	window.URL.revokeObjectURL(url)
		// 	a.remove()
		// })
	}

	// THIS IS FOR PUBLISHING FROM THE PRIVATE VIEW

	async function unpublish (ids) {
		if (!ids) ids = data.filter(d => d.status === 2).map(d => d.id)
		return await PUT('/unpublish', { type: 'pads', ids: ids })
	}
	// async function createXLS () {
	// 	const pads = d3.selectAll('.pad.flagged')
	// 	const solutions = pads.data()

	// 	// STRUCTURE OF THE EXCEL: id, title, contributor, contribution_date, full_text, location, sdgs * 5, thematic_areas * 5, images
	// 	const imgs = solutions.map(d => {
	// 		return d.media.filter(c => ['img', 'mosaic'].includes(c.type) && (c.src || c.srcs))
	// 		.map(c => {
	// 			if (c.srcs) return c.srcs
	// 			else return c.src
	// 		}).flat()
	// 	})

	// 	const xlsdata = [[
	// 		'id', 
	// 		'title', 
	// 		'contributor', 
	// 		'contribution_date', 
	// 		'full_text', 
	// 		'location_JSON', 
	// 		d3.range(5).map((d, i) => `SDG_tag_${i + 1}`),
	// 		d3.range(5).map((d, i) => `thematic_area_tag_${i + 1}`),
	// 		d3.range(d3.max(imgs, d => d.length)).map((d, i) => `image_${i + 1}`)
	// 	].flat()]
	// 	solutions.forEach(d => {
	// 		const imgIdx = d.media.filter(c => ['img', 'mosaic'].includes(c.type) && (c.src || c.srcs))
	// 		.map(c => {
	// 			if (c.srcs) return c.srcs
	// 			else return c.src
	// 		}).flat()
	// 		.map(c => `file: img-${imgs.flat().indexOf(c) + 1}`)
			
	// 		xlsdata.push([
	// 			d.id.toString(), 
	// 			d.title, 
	// 			d.contributorname, 
	// 			d.date.toString(), 
	// 			d.full_text, 
	// 			JSON.stringify(d.location.centerpoints || d.location.centerpoint), 
	// 			d3.range(5).map(c => d.sdgs[c] ? d.sdgs[c].toString() : ''), 
	// 			d3.range(5).map(c => d.tags[c] ? d.tags[c].toString() : ''),
	// 			d3.range(d3.max(imgs, c => c.length)).map(c => imgIdx[c] ? imgIdx[c].toString() : '')
	// 		].flat())
	// 	})
	// 	const res = await POST(`/export`, { data: xlsdata, imgs: imgs.flat() }, false)

	// 	const a = document.createElement('a')
	// 	var fileName = res.blob().then(b => {
	// 		var url = window.URL.createObjectURL(b)
	// 		a.href = url
	// 		a.download = `solutions_${(new Date(Date.now())).display_for_query()}.zip`
	// 		a.click()
	// 		window.URL.revokeObjectURL(url)
	// 	})
	// }

	window.addEventListener('keyup', function (e) {
		e = e || event
		if (e.key === 'Escape' || e.keyCode === 27) d3.selectAll('.modal').remove()
	})

	window.onload = function () {
		// renderStats(data, <%- JSON.stringify(locals.stats) %>)
		renderSections(<%- JSON.stringify(locals.sections) %>, <%- JSON.stringify(locals.stats.breakdown) %>)
	}

</script>

</body>
</html>