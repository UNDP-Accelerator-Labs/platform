<!DOCTYPE html>
<html lang='<%- locals.lang %>'>
<head>

<%- include ('partials/head.ejs') %> 

</head>


<body>
<!-- INCLUDE MULTI-LANGUAGE VOCABULARY FOR ejs -->
<%- include ('partials/navigate.ejs') %> 
<%- include ('partials/menu-filters.ejs') %> 

<main id='browse-pads'>
	<div class='inner'>
		<% if (locals.space === 'private') { %>
			<section class='new'>
			<% if (locals.participations.length > 0) { %>
				<% 
					const mobs = locals.participations.map(m => { 
						console.log(m)
						return { 
							label: `${m.title}<div class="sub">Shared by ${m.host_name} on ${m.start_date}</div>`, 
							class: 'padded',
							href: `/${locals.lang}/contribute/pad?mobilization=${m.id}&template=${m.template}` 
						}
					})
					if (locals.rights > 1) {
						mobs.push({ label: vocabulary['free pad'][locals.lang], href: `/${locals.lang}/contribute/pad` })
					}
				%>
				<a onclick='renderModal({ headline: "<%- vocabulary[`contribute`][locals.lang] %>", opts: <%- JSON.stringify(mobs) %>, theme: "blue", node: this.parentNode })'>
					<button><div>+</div></button>
				</a>
			<% } else if (locals.rights > 1) { %>
				<a href='/<%- locals.lang %>/contribute/pad'><button id='add'>+</button></a>
			<% } %>
			</section>
		<% } %>
		<section class='overview'></section>
	</div>
	<div class='lds-ellipsis hide'><div></div><div></div><div></div><div></div></div>
</main>

<footer>
	
</footer>



<script type='text/javascript'>
	const main = d3.select('main#browse-pads')
		// .call(multiSelection, { class: '.pad.visible .inner', filter: d => d.editable })
	const layout = main.select('div.inner')
	const overview = layout.select('section.overview')
	
	let data = <%- JSON.stringify(locals.pads) %>;

	const queryparams = <%- JSON.stringify(locals.queryparams) %>;

	let page = <%- locals.page %>;
	var lazyloading = false
	

	function renderStats (data, counts) {
		// THIS IS THE META INFORMATION
		const stats = overview.addElems('div', 'summary-statistics', [counts])

		const count = stats.addElems('div', 'statistic count')
		.addElems('h1')
			.html(d => d.filtered)
		count.addElems('small')
			.html(d => `/ ${d.total}`)
		count.addElems('br')
		count.addElems('small', 'light')
			.html(d => vocabulary['pad']['<%- locals.lang %>'](d.total !== 1))
		const contributors = stats.addElems('div', 'statistic contributors')
		.addElems('h2', 'lg')
			.html(d => d.contributors)
		contributors.addElems('small')
		contributors.addElems('br')
		contributors.addElems('small', 'light')
			.html(d => vocabulary['contributor']['<%- locals.lang %>'](d !== 1))
	}

	function renderSections (data, counts) {
		// MAKE SURE WE ONLY KEEP THE SECTIONS WHERE THERE ARE PADS
		data = data.filter(d => counts.map(c => c.status).includes(d.status))
		const sections = layout.addElems('section', 'pads-container', data)
		sections.addElems('div', 'pub-status')
			.addElems('label')
			.html(d => {
				const count = counts.find(c => c.status === d.status).count
				return vocabulary['pad publication status']['<%- locals.lang %>'](count, d.status)
			})
		// FOR PUBLISHABLE PADS, PUBLISH ALL
		sections.addElems('div', 'input-group publish', d => d.status === 1 ? [d] : [])
			.addElems('form')
			.attrs({ 'action': '/publish/pads', 'method': 'GET' })
		.addElems('button')
			.attr('type', 'submit')
		.each(function () {
			const sel = d3.select(this)
			sel.addElems('i', 'material-icons').html('publish')
			sel.addElems('label').html(vocabulary['publish all']['<%- locals.lang %>'])
		})
		// FOR BOOKMARKED PADS, DOWNLOAD ALL
		sections.addElems('div', 'input-group download', d => '<%- locals.space %>' === 'bookmarks' ? [d] : [])
			.addElems('form')
		.addElems('button')
			.attr('type', 'button')
		.each(function () {
			const sel = d3.select(this)
			sel.addElems('i', 'material-icons').html('download')
			sel.addElems('label').html(vocabulary['download all']['<%- locals.lang %>'])
		}).on('click', _ => downloadPads('bookmarks'))

		sections.addElems('div', 'pads-layout')
			.each(function (d) {
				const section = d3.select(this)
				section.classed(d.label, true)
				d.pads.forEach(p => section.call(renderVignette, p))
			})
	}

	function renderVignette (section, data) {
		function getImg (d) {
			if (d && d.media) {
				const img = d.media.find(c => c.type === 'img' && c.src)
				const mosaic = d.media.find(c => c.type === 'mosaic' && c.srcs[0])
				const embed = d.media.find(c => c.type === 'embed' && c.src)
				if (img) return [`/${img.src.replace('uploads', 'uploads/sm')}`]
				else if (mosaic) return [`/${mosaic.srcs[0].replace('uploads', 'uploads/sm')}`]
				else if (embed) return [`/${embed.src.replace('uploads', 'uploads/sm')}`]
				else return [null]
			} else return [null]
		}
		function getSDGs (d) {
			if (d && d.meta) {
				if (d.meta.find(c => c.type === 'sdgs')) return [d.meta.find(c => c.type === 'sdgs').sdgs]
				else return []
			} else return []
		}
		function getTags(d) {
			if (d && d.meta) {
				if (d.meta.find(c => c.type === 'tags')) return [d.meta.find(c => c.type === 'tags').tags.map(c => c.name)]
				else return []
			} else return []
		}

		const pads = section.addElem('div', 'pad')
			.datum(data)
		.addElems('div', 'inner')
			.addElems('div', 'body')

		const media = pads.addElems('div', 'media media-img')
		media.addElems('div', 'btn-group')
		.addElems('form', 'pad-actons', function (d) {
			const opts = []
			// THE FIRST LINE IS IF WE SELECT MULTIPLE PADS
			if (d.editable && d.status === 1) opts.push({ action: '/publish/pads', method: 'GET', node: 'button', type: 'submit', label: 'Publish' })
			// TO DO: UNPUBLISH
			if (d.status === 2) opts.push({ node: 'button', type: 'button', label: 'Download', fn: downloadPads })
			if (d.editable) opts.push({ node: 'button', type: 'button', label: 'Delete', fn: deletePads })
			return opts
		}).attrs({ 'action': d => d.action, 'method': d => d.method })
		.each(function (d) {
			const sel = d3.select(this)
			const pad = sel.findAncestor('pad')
			sel.addElems('input')
				.attrs({ 'type': 'hidden', 'name': 'id', 'value': pad.datum().id })
			sel.addElems(d.node, 'btn-overlay')
				.attr('type', d.type)
				.html(d => d.label)
			.on('click', _ => d.fn ? d.fn(pad) : null)
		})
		// WE SEPARATE BOOKMARKS FROM THE OTHER TYPES OF ENGAGEMENT
		// media.addElems('div', 'bookmark', d => d.status === 2 ? [{ type: 'bookmark', active: d.bookmarked, pad: d.id }] : [])
		// 	.classed('active', d => d.active)
		// .on('click', async function (d) {
		// 	const result = await POST('/engage', { pad: d.pad, active: !d.active, type: d.type })
		// 	d.active = result.bool
		// 	d3.select(this).classed('active', d.active)
		// 		.select('div')
		// 		.html(vocabulary['bookmark'](d.active))
		// }).addElems('div', 'label')
		// 	.html(d => vocabulary['bookmark']['<%- locals.lang %>'](d.active))
		
		media.addElems('a', 'pad-link')
			.attr('href', d => d.editable ? `../../edit/pad?id=${d.id}` : `../../view/pad?id=${d.id}`)
		.addElems('img', 'vignette', d => getImg(d))
			.attrs({ 'loading': 'lazy', 'alt': d => vocabulary['missing image']['<%- locals.lang %>'] })
		.each(function (d) {
			const node = this
			const img = new Image()
			img.onload = function () { node.src = this.src }
			img.src = d
		})

		const metaR1 = pads.addElems('div', 'meta row-1')
		const sdgs = metaR1.addElems('div', 'meta meta-sdgs', d => getSDGs(d))
		sdgs.addElems('span')
			.html(d => `${vocabulary['SDG']['<%- locals.lang %>'](d.length > 1)}:`)
		sdgs.addElems('a', 'sdg-link', d => d)
			.attr('href', d => `?sdgs=${d}`)
			.html(d => d)
		
		// metaR1.addElems('div', 'meta meta-engagement')
		// 	.addElems('button', 'engagement', d => {
		// 		const opts = []
		// 		opts.push({ type: 'inspiration', count: d.inspirations, active: d.inspired, pad: d.id }) // HAS BEEN FOUND INSPIRATIONAL BY n USERS AND IS ACTIVE FOR CURRENT USER
		// 		opts.push({ type: 'approval', count: d.approvals, active: d.approved, pad: d.id }) // HAS BEEN APPROVED BY n USERS AND IS ACTIVE FOR CURRENT USER
		// 		opts.push({ type: 'flag', count: d.flags, active: d.flagged, pad: d.id }) // HAS BEEN FLAGGED FOR TOMORROW BY n USERS AND IS ACTIVE FOR CURRENT USER
		// 		return d.status === 2 ? opts : []
		// 	}).classed('active', d => d.active)
		// 	.attr('data-count', d => d.count)
		// .on('click', async function (d) {
		// 	const sel = d3.select(this)
		// 	if (d.type === 'approval') {
		// 		if (!d.active) {
		// 			const message = 'Describe in a few sentences how you tested and validated this solution.' // TO DO: TRANSLATE
		// 			const form = { action: '/validate',  method: 'POST' }
		// 			const opts = []
		// 			opts.push({ node: 'input', type: 'hidden', name: 'pad', value: d.pad })
		// 			opts.push({ node: 'input', type: 'hidden', name: 'active', value: !d.active })
		// 			opts.push({ node: 'input', type: 'hidden', name: 'type', value: d.type })
		// 			opts.push({ node: 'input', type: 'hidden', name: 'path', value: new URL(window.location) })
		// 			opts.push({ node: 'textarea', name: 'message', placeholder: 'What did you do?' }) // TO DO: TRANSLATE
		// 			const foot = { node: 'button', type: 'submit', label: 'Validate the solution' } // TO DO: TRANSLATE
		// 			renderFormModal({ message: message, formdata: form, opts: opts, foot: foot })
		// 		}
		// 	} else {
		// 		const result = await POST('/engage', { pad: d.pad, active: !d.active, type: d.type })
		// 		d.active = result.bool
		// 		d.count = d.active ? d.count + 1 : d.count - 1
		// 		sel.classed('active', d.active)
		// 			.attr('data-count', d.count)
		// 	}
		// }).addElems('i', 'material-icons-outlined')
		// 	.html(d => {
		// 		if (d.type === 'bookmark') return 'bookmark'
		// 		else if (d.type === 'inspiration') return 'wb_sunny'
		// 		else if (d.type === 'approval') return 'thumb_up'
		// 		else if (d.type === 'flag') return '()'
		// 	})

		pads.addElems('div', 'meta meta-tags', d => getTags(d))
			.addElems('a', 'tag-link', d => d)
			.attr('href', d => `?thematic_areas=${d}`)
		.addElems('div', 'tag')
			.addElems('label')
			.attr('title', d => d.capitalize())
			.html(d => d.length <= 12 ? d.capitalize() : `${d.slice(0, 12).capitalize()}…`)

		pads.addElems('div', 'media media-title')
			.addElems('a', 'pad-link')
			.attr('href', d => d.editable ? `../../edit/pad?id=${d.id}` : `../../view/pad?id=${d.id}`)
			.html(d => {
				if (d.title === null || d.title === undefined || d.title === '') return `[${vocabulary['untitled pad']['<%- locals.lang %>']}]`
				else return d.title
			})

		pads.addElems('div', 'meta meta-contributor')
			.html(d => vocabulary['credit']['<%- locals.lang %>'](d.contributor, d.contributorname, d.date))
	}

	window.onscroll = async function (ev) {
		if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight && !lazyloading) {
			console.log('hit the bottom')
			main.select('.lds-ellipsis').classed('hide', false)
			
			page ++
			lazyloading = true
			
			const url = new URL(window.location)
			const queryparams = new URLSearchParams(url.search)
			queryparams.set('page', page)

			const response = await GET(`?${queryparams.toString()}`) // NO TARGET NEEDED SINCE SAME AS CURRENT PAGE

			d3.selectAll('section.pads-container div.pads-layout')
			.each(function (d) {
				const section = d3.select(this)
				response.sections.find(s => s.status === d.status).pads.forEach(p => section.call(renderVignette, p))
			})

			if (response.count < <%- locals.stats.filtered %>) lazyloading = false
			else main.select('.lds-ellipsis').classed('hide', true)
		}
	}

	async function deletePads (pads) {
		const data = pads.data()
		const message = `Do you really want to delete the following ${data.length > 1 ? data.length : ''} solution${data.length > 1 ? 's' : ''}: <strong>${data.map(d => d.title || '<%- vocabulary["untitled solution"][locals.lang] %>').join('</strong>, <strong>')}</strong>? <br/><small>* This operation cannot be undone.</small>` // TO DO: TRANSLATE
		const form = { action: '/delete/pads',  method: 'GET' }
		const opts = [{ node: 'button', type: 'submit', label: `Delete ${data.length > 1 ? 'them' : 'it'}` }]
		data.forEach(d => opts.unshift({ node: 'input', type: 'hidden', name: 'id', value: d.id }))

		renderFormModal({ message: message, formdata: form, opts: opts })
	}
	async function downloadPads (source) {
		if (source !== 'bookmarks') source = source.datum().id // IF A SINGLE SOLUTION, EXTRACT id
		const headline = source === 'bookmarks' ? vocabulary['download all']['<%- locals.lang %>'] : vocabulary['download']['<%- locals.lang %>']
		const opts = [
			{ node: 'button', type: 'button', label: 'raw data', resolve: 'raw' }, 
			// { node: 'button', type: 'button', label: 'as .pdf', resolve: 'pdf' } // TO DO
		]
		const format = await renderPromiseModal({ headline: headline, opts: opts })
		const res = await POST(`/download/${format}`, { source: source }, false)

		const a = document.createElement('a')
		res.blob().then(b => {
			var url = window.URL.createObjectURL(b)
			a.href = url
			a.download = `solutions_${(new Date(Date.now())).display_for_query()}.zip`
			a.click()
			window.URL.revokeObjectURL(url)
			a.remove()
		})
	}

	// THIS IS FOR PUBLISHING FROM THE PRIVATE VIEW

	async function unpublish (ids) {
		if (!ids) ids = data.filter(d => d.status === 2).map(d => d.id)
		return await PUT('/unpublish', { type: 'pads', ids: ids })
	}
	// async function createXLS () {
	// 	const pads = d3.selectAll('.pad.flagged')
	// 	const solutions = pads.data()

	// 	// STRUCTURE OF THE EXCEL: id, title, contributor, contribution_date, full_text, location, sdgs * 5, thematic_areas * 5, images
	// 	const imgs = solutions.map(d => {
	// 		return d.media.filter(c => ['img', 'mosaic'].includes(c.type) && (c.src || c.srcs))
	// 		.map(c => {
	// 			if (c.srcs) return c.srcs
	// 			else return c.src
	// 		}).flat()
	// 	})

	// 	const xlsdata = [[
	// 		'id', 
	// 		'title', 
	// 		'contributor', 
	// 		'contribution_date', 
	// 		'full_text', 
	// 		'location_JSON', 
	// 		d3.range(5).map((d, i) => `SDG_tag_${i + 1}`),
	// 		d3.range(5).map((d, i) => `thematic_area_tag_${i + 1}`),
	// 		d3.range(d3.max(imgs, d => d.length)).map((d, i) => `image_${i + 1}`)
	// 	].flat()]
	// 	solutions.forEach(d => {
	// 		const imgIdx = d.media.filter(c => ['img', 'mosaic'].includes(c.type) && (c.src || c.srcs))
	// 		.map(c => {
	// 			if (c.srcs) return c.srcs
	// 			else return c.src
	// 		}).flat()
	// 		.map(c => `file: img-${imgs.flat().indexOf(c) + 1}`)
			
	// 		xlsdata.push([
	// 			d.id.toString(), 
	// 			d.title, 
	// 			d.contributorname, 
	// 			d.date.toString(), 
	// 			d.full_text, 
	// 			JSON.stringify(d.location.centerpoints || d.location.centerpoint), 
	// 			d3.range(5).map(c => d.sdgs[c] ? d.sdgs[c].toString() : ''), 
	// 			d3.range(5).map(c => d.tags[c] ? d.tags[c].toString() : ''),
	// 			d3.range(d3.max(imgs, c => c.length)).map(c => imgIdx[c] ? imgIdx[c].toString() : '')
	// 		].flat())
	// 	})
	// 	const res = await POST(`/export`, { data: xlsdata, imgs: imgs.flat() }, false)

	// 	const a = document.createElement('a')
	// 	var fileName = res.blob().then(b => {
	// 		var url = window.URL.createObjectURL(b)
	// 		a.href = url
	// 		a.download = `solutions_${(new Date(Date.now())).display_for_query()}.zip`
	// 		a.click()
	// 		window.URL.revokeObjectURL(url)
	// 	})
	// }

	window.addEventListener('keyup', function (e) {
		e = e || event
		if (e.key === 'Escape' || e.keyCode === 27) d3.selectAll('.modal').remove()
	})

	window.onload = function () {
		renderStats(data, <%- JSON.stringify(locals.stats) %>)
		renderSections(<%- JSON.stringify(locals.sections) %>, <%- JSON.stringify(locals.stats.breakdown) %>)
	}

</script>

</body>
</html>