<!DOCTYPE html>
<html lang='<%- locals.lang %>'>
<head>

	<%- include ('partials/head.ejs') %> 

</head>


<body>
<!-- INCLUDE MULTI-LANGUAGE VOCABULARY FOR ejs -->
<%- include ('partials/navigate.ejs') %> 
<%- include ('partials/menu-filters.ejs') %> 

<main id='browse-templates'>
	<div class='inner'>
		<% if (locals.space === 'private') { %>
			<section class='new'>
				<a href='../../contribute/template'><button id='add'><div>+</div></button></a>
			</section>
		<% } %>
		<section class='overview'></section>
	</div>
	<div class='lds-ellipsis hide'><div></div><div></div><div></div><div></div></div>
</main>

<footer>
</footer>



<script type='text/javascript'>
	const main = d3.select('main')
		// .call(multiSelection, { class: '.template.visible .inner', filter: d => d.editable })
	const templatesLayout = main.select('.inner')
	const overview = templatesLayout.select('.overview')
	 
	const queryparams = <%- JSON.stringify(locals.queryparams) %>;
	var lang = '<%- locals.lang %>'; // THIS NEEDS TO BE A GLOBAL VARIABLE
	const rights = <%- locals.rights %>;

	let page = <%- locals.page %>;
	var lazyloading = false

	function renderStats (counts) {
		// THIS IS THE META INFORMATION
		const stats = overview.addElems('div', 'summary-statistics', [counts])

		const count = stats.addElems('div', 'statistic count')
		.addElems('h1')
			.html(d => d.filtered)
		count.addElems('small')
			.html(d => `/ ${d.total}`)
		count.addElems('br')
		count.addElems('small', 'light')
			.html(d => vocabulary['template']['<%- locals.lang %>'](d.total !== 1))
		const contributors = stats.addElems('div', 'statistic contributors')
		// .addElems('h2', 'lg', public || rights > 1 ? [meta.unique('id').length] : [])
		.addElems('h2', 'lg', [<%- locals.mappers.unique('id').length %>])
			.html(d => d)
		contributors.addElems('small')
		contributors.addElems('br')
		contributors.addElems('small', 'light')
			// .html(_ => vocabulary['contributor']['<%- locals.lang %>'](meta.unique('id').length !== 1))
			.html(d => vocabulary['contributor']['<%- locals.lang %>'](d !== 1))
	}	


	function renderSections (data, counts) {
		// MAKE SURE WE ONLY KEEP THE SECTIONS WHERE THERE ARE PADS
		data = data.filter(d => counts.map(c => c.status).includes(d.status))
		const sections = templatesLayout.addElems('section', 'templates-container', data)
		sections.addElems('div', 'pub-status')
			.addElems('div')
			.html(d => {
				const count = counts.find(c => c.status === d.status).count
				return vocabulary['template publication status']['<%- locals.lang %>'](count, d.status)
			})
		sections.addElems('div', 'input-group', d => d.status === 1 ? [d] : [])
			.addElems('form')
			.attrs({ 'action': '/publish/templates', 'method': 'GET' })
		.addElems('button')
			.attr('type', 'submit')
		.each(function () {
			const sel = d3.select(this)
			sel.addElems('i', 'material-icons').html('publish')
			sel.addElems('label').html(vocabulary['publish all']['<%- locals.lang %>'])
		})
		sections.addElems('div', 'templates-layout')
			.each(function (d) {
				const section = d3.select(this)
				section.classed(d.label, true)
				d.templates.forEach(p => section.call(renderVignette, p))
			})
	}

	function renderVignette (section, data) {		
		// function getTags(d) {
		// 	if (d && d.meta) {
		// 		if (d.meta.find(c => c.type === 'tags')) return [d.meta.find(c => c.type === 'tags').tags.map(c => c.name)]
		// 		else return []
		// 	} else return []
		// }

		const templates = section.addElem('div', 'template')
			.datum(data)
		.addElems('div', 'inner')
			.addElems('a', 'template-link')
			.attr('href', d => d.editable ? `../../edit/template?id=${d.id}` : `../../view/template?id=${d.id}`)
		.addElems('div', 'body')

		// const media = pads.addElems('div', 'media media-img')
		// // WE SEPARATE BOOKMARKS FROM THE OTHER TYPES OF ENGAGEMENT
		// media.addElems('div', 'bookmark', d => d.status === 2 ? [{ type: 'bookmark', active: d.bookmarked, pad: d.id }] : [])
		// 	.classed('active', d => d.active)
		// .on('click', async function (d) {
		// 	const result = await POST('/engage', { pad: d.pad, active: !d.active, type: d.type })
		// 	d.active = result.bool
		// 	d3.select(this).classed('active', d.active)
		// 		.select('div')
		// 		.html(vocabulary['bookmark'](d.active))
		// }).addElems('div', 'label')
		// 	.html(d => vocabulary['bookmark']['<%- locals.lang %>'](d.active))
		// media.addElems('a', 'pad-link')
		// 	.attr('href', d => d.editable ? `../edit/solution?pad=${d.id}` : `../view/solution?pad=${d.id}`)
		// .addElems('img', 'vignette', d => getImg(d))
		// 	.attrs({ 'loading': 'lazy', 'alt': d => vocabulary['missing image']['<%- locals.lang %>'] })
		// .each(function (d) {
		// 	const node = this
		// 	const img = new Image()
		// 	img.onload = function () { node.src = this.src }
		// 	img.src = d
		// })

		const head = templates.addElems('div', 'head')

		// const metaR1 = head.addElems('div', 'meta row-1')		
		// metaR1.addElems('div', 'meta meta-engagement')
		// 	.addElems('button', 'engagement', d => {
		// 		const opts = []
		// 		// THIS IS TEMP, WILL HAVE TO CONNECT WITH DATA FROM DB
		// 		// opts.push({ type: 'bookmark', count: d.bookmarks, active: d.bookmarked, pad: d.id }) // HAS BEEN BOOKMARKED BY n USERS AND IS ACTIVE FOR CURRENT USER
		// 		opts.push({ type: 'inspiration', count: d.inspirations, active: d.inspired, pad: d.id }) // HAS BEEN FOUND INSPIRATIONAL BY n USERS AND IS ACTIVE FOR CURRENT USER
		// 		opts.push({ type: 'approval', count: d.approvals, active: d.approved, pad: d.id }) // HAS BEEN APPROVED BY n USERS AND IS ACTIVE FOR CURRENT USER
		// 		opts.push({ type: 'flag', count: d.flags, active: d.flagged, pad: d.id }) // HAS BEEN FLAGGED FOR TOMORROW BY n USERS AND IS ACTIVE FOR CURRENT USER
		// 		return d.status === 2 ? opts : []
		// 	}).classed('active', d => d.active)
		// 	.attr('data-count', d => d.count)
		// .on('click', async function (d) {
		// 	if (d.type === 'approval') {
		// 		if (!d.active) {
		// 			const message = 'Describe in a few sentences how you tested and validated this solution.' // TO DO: TRANSLATE
		// 			const form = { action: '/validate',  method: 'POST' }
		// 			const opts = []
		// 			opts.push({ node: 'input', type: 'hidden', name: 'pad', value: d.pad })
		// 			opts.push({ node: 'input', type: 'hidden', name: 'active', value: !d.active })
		// 			opts.push({ node: 'input', type: 'hidden', name: 'type', value: d.type })
		// 			opts.push({ node: 'input', type: 'hidden', name: 'path', value: new URL(window.location) })
		// 			opts.push({ node: 'textarea', name: 'message', placeholder: 'What did you do?' }) // TO DO: TRANSLATE
		// 			opts.push({ node: 'button', type: 'submit', label: 'Validate solution', resolve: true }) // TO DO: TRANSLATE
		// 			renderFormModal({ message: message, formdata: form, opts: opts })
		// 		}
		// 	} else {
		// 		const result = await POST('/engage', { pad: d.pad, active: !d.active, type: d.type })
		// 		d.active = result.bool
		// 		d.count = d.active ? d.count + 1 : d.count - 1
		// 		sel.classed('active', d.active)
		// 			.attr('data-count', d.count)
		// 	}
		// }).addElems('i', 'material-icons-outlined')
		// 	.html(d => {
		// 		if (d.type === 'bookmark') return 'bookmark'
		// 		else if (d.type === 'inspiration') return 'wb_sunny'
		// 		else if (d.type === 'approval') return 'thumb_up'
		// 		else if (d.type === 'flag') return '()'
		// 	})

		// templates.addElems('div', 'meta meta-tags', d => getTags(d))
		// 	.addElems('a', 'tag-link', d => d)
		// 	.attr('href', d => `?thematic_areas=${d}`)
		// .addElems('div', 'tag')
		// 	.addElems('label')
		// 	.attr('title', d => d.capitalize())
		// 	.html(d => d.length <= 12 ? d.capitalize() : `${d.slice(0, 12).capitalize()}â€¦`)

		head.addElems('div', 'media media-title')
			.html(d => {
				if (d.title === null || d.title === undefined || d.title === '') return `[${vocabulary['untitled template']['<%- locals.lang %>']}]`
				else return d.title
			})
		head.addElems('div', 'meta meta-contributor')
			.html(d => vocabulary['credit']['<%- locals.lang %>'](d.contributor, d.contributorname, d.date))
		const content = templates.addElems('div', 'content')
		content.addElems('div', 'media media-txt')
			.attr('data-placeholder', '<%- vocabulary['missing template description'][locals.lang] %>')
			.html(d => d.description)

		content.addElems('div', 'btn-group')
		.addElems('form', 'pad-actons', function (d) {
			const opts = []
			if (d.editable && d.status === 1) opts.push({ action: '/publish/templates', method: 'GET', node: 'button', type: 'submit', label: 'Publish' })
			// TO DO: UNPUBLISH
			if (d.editable && d.associated_pads === 0) opts.push({ node: 'button', type: 'button', label: 'Delete', fn: deleteTemplates })
			return opts
		}).attrs({ 'action': d => d.action, 'method': d => d.method })
		.each(function (d) {
			const sel = d3.select(this)
			const template = sel.findAncestor('template')
			sel.addElems('input')
				.attrs({ 'type': 'hidden', 'name': 'id', 'value': template.datum().id })
			sel.addElems('a')
				.attr('href', '#')
			.addElems(d.node, 'btn-overlay')
				.attr('type', d.type)
				.html(d => d.label)
			.on('click', _ => {
				if (d.fn) d.fn(template)
			})
		})

		const statistics = templates.addElems('div', 'foot')
			.addElems('div', 'media meta-stats')
		const itemcount = statistics.addElems('h1', 'item-count')
			.html(d => d.sections ? d.sections.map(d => d.structure).flat().length : 0)
		// itemcount.addElems('small')
		itemcount.addElems('br')
		itemcount.addElems('small', 'light')
			.html(d => vocabulary['item']['<%- locals.lang %>'](d.sections ? d.sections.map(d => d.structure).flat().length !== 1 : true))
		const padcount = statistics.addElems('h1', 'pads-count')
				.html(d => d.associated_pads)
			// padcount.addElems('small')
			padcount.addElems('br')
			padcount.addElems('small', 'light')
				.html(d => vocabulary['pad']['<%- locals.lang %>'](d.associated_pads !== 1))
	}

	window.onscroll = async function (ev) {
		if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight && !lazyloading) {
			console.log('hit the bottom')
			main.select('.lds-ellipsis').classed('hide', false)
			
			page ++
			lazyloading = true

			const url = new URL(window.location)
			const queryparams = new URLSearchParams(url.search)
			queryparams.set('page', page)

			const response = await GET(`?${queryparams.toString()}`) // NO TARGET NEEDED SINCE SAME AS CURRENT PAGE
			
			d3.selectAll('section.templates-container div.templates-layout')
			.each(function (d) {
				const section = d3.select(this)
				response.sections.find(s => s.status === d.status).templates.forEach(p => section.call(renderVignette, p))
			})

			if (response.count < <%- locals.stats.filtered %>) lazyloading = false
			else main.select('.lds-ellipsis').classed('hide', true)
		}
	}

	async function deleteTemplates (templates) {
		const data = templates.data()
		const message = `Do you really want to delete the following ${data.length > 1 ? data.length : ''} template${data.length > 1 ? 's' : ''}: <strong>${data.map(d => d.title || '<%- vocabulary["untitled template"][locals.lang] %>').join('</strong>, <strong>')}</strong>? <br/><small>* This operation cannot be undone.</small>` // TO DO: TRANSLATE
		const form = { action: '/delete/templates',  method: 'GET' }
		const opts = [{ node: 'button', type: 'submit', label: `Delete ${data.length > 1 ? 'them' : 'it'}`, resolve: true }]
		data.forEach(d => opts.unshift({ node: 'input', type: 'hidden', name: 'id', value: d.id }))

		renderFormModal({ message: message, formdata: form, opts: opts })
	}

	// THIS IS FOR PUBLISHING FROM THE PRIVATE VIEW
	// async function publish (ids) {
	// 	//if (!ids) ids = meta.filter(d => d.status === 1).map(d => d.pid) // THIS IS TO PUBLISH ALL PUBLISHABLE PADS AT ONCE: MOVE THIS TO BACKEND
	// 	const result = await POST('/publish', { type: 'pads', ids: ids })
	// 	if (result.status === 200) window.location.href = `/${lang}/browse/public`
	// }
	async function unpublish (ids) {
		if (!ids) ids = data.filter(d => d.status === 2).map(d => d.id)
		return await POST('/unpublish', { type: 'templates', ids: ids })
	}

	window.addEventListener('keyup', function (e) {
		e = e || event
		if (e.key === 'Escape' || e.keyCode === 27) d3.selectAll('.modal').remove()
	})


	window.onload = function () {
		renderStats(<%- JSON.stringify(locals.stats) %>)
		renderSections(<%- JSON.stringify(locals.sections) %>, <%- JSON.stringify(locals.stats.breakdown) %>)
	}

	// window.addEventListener('resize', resizeAll)

</script>

</body>
</html>