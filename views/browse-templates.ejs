<!DOCTYPE html>
<html lang='<%- locals.metadata.page.lang %>'>
<head>

	<%- include ('partials/head.ejs') %> 

</head>


<body>
<!-- INCLUDE MULTI-LANGUAGE VOCABULARY FOR ejs -->
<%- include ('partials/multi-language.ejs') %> 
<%- include ('partials/menu-languages.ejs') %> 
<%# include ('partials/menu-filters.ejs') %> 
<%- include ('partials/menu-logo.ejs') %> 


<div class='browse'>
	<%- include ('partials/navigate.ejs') %> 
	<nav>
		<ul>
			<% if (locals.metadata.user.rights > 0) { %>
				<li class='<% if (locals.metadata.page.space === "private") { %>active<% } %>'>
					<a href='./private'>
						<% if (locals.metadata.page.object === 'pads') { %><button><%- vocabulary['private'][locals.metadata.page.lang] %><div class='count'><%- locals.stats.privatecount %></div></button>
						<% } else if (locals.metadata.page.object === 'templates') { %><button><%- vocabulary['private templates'][locals.metadata.page.lang] %><div class='count'><%- locals.stats.privatecount %></div></button><% } %>
					</a>	
				</li>
			<% } %>
			<li class='<% if (locals.metadata.page.space === "public") { %>active<% } %>'>
				<a href='./public'>
					<% if (locals.metadata.page.object === 'pads') { %><button><%- vocabulary['public'][locals.metadata.page.lang] %><div class='count'><%- locals.stats.publiccount %></div></button>
					<% } else if (locals.metadata.page.object === 'templates') { %><button><%- vocabulary['public templates'][locals.metadata.page.lang] %><div class='count'><%- locals.stats.publiccount %></div></button><% } %>
				</a>
			</li>
			<!-- <% if (locals.metadata.page.object === 'pads') { %>
				<a href='./bookmarks'>
					<li class='<% if (locals.metadata.page.space === "bookmarks") { %>active<% } %>'><%- vocabulary['bookmarks'][locals.metadata.page.lang] %></li>
				</a>
			<% } %> -->
		</ul>
	</nav>
	<main>
		<div class='inner'>
		</div>
	</main>
</div>

<!-- <main id='browse-templates'>
	<div class='inner'>
		<% if (locals.metadata.page.space === 'private') { %>
			<section class='new'>
				<a href='../../contribute/template'><button id='add'><div>+</div></button></a>
			</section>
		<% } %>
		<section class='overview'></section>
	</div>
	<div class='lds-ellipsis hide'><div></div><div></div><div></div><div></div></div>
</main> -->

<footer>
</footer>



<script type='text/javascript'>
	const main = d3.select('div.browse main')
	// const main = d3.select('main')
		// .call(multiSelection, { class: '.template.visible .inner', filter: d => d.editable })
	const layout = main.select('.inner')
	const overview = layout.select('.overview')
	 
	// const queryparams = <%- JSON.stringify(locals.metadata.page.query) %>;
	var lang = '<%- locals.metadata.page.lang %>'; // THIS NEEDS TO BE A GLOBAL VARIABLE
	const rights = <%- locals.metadata.user.rights %>;

	let page = <%- locals.metadata.page.id %>;
	var lazyloading = false

	function renderStats (counts) {
		// THIS IS THE META INFORMATION
		const stats = overview.addElems('div', 'summary-statistics', [counts])

		const count = stats.addElems('div', 'statistic count')
		.addElems('h1')
			.html(d => d.filtered)
		count.addElems('small')
			.html(d => `/ ${d.total}`)
		count.addElems('br')
		count.addElems('small', 'light')
			.html(d => vocabulary['template']['<%- locals.metadata.page.lang %>'](d.total !== 1))
		const contributors = stats.addElems('div', 'statistic contributors')
		// .addElems('h2', 'lg', public || rights > 1 ? [meta.unique('id').length] : [])
		.addElems('h2', 'lg', [<%- locals.stats.contributors %>])
			.html(d => d)
		contributors.addElems('small')
		contributors.addElems('br')
		contributors.addElems('small', 'light')
			// .html(_ => vocabulary['contributor']['<%- locals.metadata.page.lang %>'](meta.unique('id').length !== 1))
			.html(d => vocabulary['contributor']['<%- locals.metadata.page.lang %>'](d !== 1))
	}	


	function renderSections (data, counts) {
		// MAKE SURE WE ONLY KEEP THE SECTIONS WHERE THERE ARE PADS
		// data = data.filter(d => counts.map(c => c.status).includes(d.status))
		const sections = layout.addElems('section', 'templates-container', data)
		// sections.addElems('div', 'pub-status')
		// 	.addElems('div')
		// 	.html(d => {
		// 		const count = counts.find(c => c.status === d.status).count
		// 		return vocabulary['template publication status']['<%- locals.metadata.page.lang %>'](count, d.status)
		// 	})
		// sections.addElems('div', 'input-group', d => d.status === 1 ? [d] : [])
		// 	.addElems('form')
		// 	.attrs({ 'action': '/publish/templates', 'method': 'GET' })
		// .addElems('button')
		// 	.attr('type', 'submit')
		// .each(function () {
		// 	const sel = d3.select(this)
		// 	sel.addElems('i', 'material-icons').html('publish')
		// 	sel.addElems('label').html(vocabulary['publish all']['<%- locals.metadata.page.lang %>'])
		// })
		sections.addElems('div', 'templates-layout')
			.each(function (d) {
				const section = d3.select(this)
				// section.classed(d.label, true)
				d.templates.forEach(p => section.call(renderVignette, p))
			})
	}

	function renderVignette (section, data) {		
		const templates = section.addElem('div', 'template')
			.datum(data)
		.each(function (d) {
			d3.select(this).classed(`status-${d.status}`, true)
		}).addElems('div', 'inner')

		const head = templates.addElems('div', 'head')
		const body = templates.addElems('div', 'body')
		const foot = templates.addElems('div', 'foot')

		const metagroup = head.addElems('div', 'meta-group')
		metagroup.addElems('div', 'meta meta-contributor')
			// .html(d => `<% if (locals.metadata.page.space === 'private') { %>${d.contributorname}<% } else { %>AccLab ${d.lab}<% } %>`)
			.html(d => `AccLab ${d.lab}`)

		metagroup.addElems('div', 'btn-group')
		.addElems('form', 'actions', function (d) {
			const opts = []
			console.log(d)
			// TO DO: UNPUBLISH
			if ('<%- locals.metadata.page.space %>' === 'private' && d.editable)

			opts.push({ node: 'button', type: 'button', disabled: !(d.editable && d.associated_pads === 0), label: 'Delete', fn: deleteTemplates })
			if ('<%- locals.metadata.page.space %>' === 'private') opts.push({ action: '/publish/templates', method: 'GET', node: 'button', type: 'submit', disabled: !(d.editable && d.status === 1), label: 'Publish' })
			return opts
		}).attrs({ 'action': d => d.action, 'method': d => d.method })
		.each(function (d) {
			const sel = d3.select(this)
			const template = sel.findAncestor('template')
			sel.addElems('input')
				.attrs({ 'type': 'hidden', 'name': 'id', 'value': template.datum().id })
			// sel.addElems('a')
			// 	.attr('href', '#')
			sel.addElems(d.node, 'btn-overlay')
				.classed(d.label.toLowerCase(), true)
				.attrs({ 'type': d.type, 'disabled': d.disabled || null })
				.html(d => d.label)
			.on('click', _ => {
				if (d.fn) d.fn(template)
			})
		})

		const title = body.addElems('div', 'media media-title')
			.addElems('a', 'template-link')
			.attrs({ 'href': d => d.editable ? `../../edit/template?id=${d.id}` : `../../view/template?id=${d.id}`, 'target': '_blank' })
		title.addElems('img')
			.attrs({ 'src': '/imgs/icons/i-template.svg', 'target': '_blank' })
		title.addElems('h1').html(d => d.title || `[${vocabulary['untitled template']['<%- locals.metadata.page.lang %>']}]`)
		// head.addElems('div', 'meta meta-contributor')
		// 	.html(d => vocabulary['credit']['<%- locals.metadata.page.lang %>'](d.contributor, d.contributorname, d.date))
		
		body.addElems('div', 'media media-txt')
			.addElems('a', 'pad-link')
			.attrs({ 
				'href': d => d.editable ? `../../edit/template?id=${d.id}` : `../../view/template?id=${d.id}`, 
				'target': '_blank',
				'data-placeholder': '<%- vocabulary['missing template description'][locals.metadata.page.lang] %>'
			}).html(d => d.description)
		body.addElems('div', 'meta meta-date')
			.html(d => d.date)


		const stats = foot.addElem('div', 'meta meta-group')
		const itemcount = stats.addElem('div', 'meta meta-stats')
		 	.addElems('a', 'disabled')
		 	.addElems('h1', 'item-count')
			.html(d => d.sections ? d.sections.map(d => d.structure).flat().length : 0)
		itemcount.addElems('small', 'light')
			.html(d => vocabulary['item']['<%- locals.metadata.page.lang %>'](d.sections ? d.sections.map(d => d.structure).flat().length !== 1 : true))
		
		const padcount = stats.addElem('div', 'meta meta-stats')
			.addElems('a')
			.classed('disabled', d => d.associated_pads === 0)
			.attr('href', d => `../../browse/pads/public?templates=${d.id}`)
		.addElems('h1', 'pads-count')
			.html(d => d.associated_pads)
		padcount.addElems('small', 'light')
			.html(d => vocabulary['pad']['<%- locals.metadata.page.lang %>'](d.associated_pads !== 1))
	}

	window.onscroll = async function (ev) {
		if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight && !lazyloading) {
			console.log('hit the bottom')
			main.select('.lds-ellipsis').classed('hide', false)
			
			page ++
			lazyloading = true

			const url = new URL(window.location)
			const queryparams = new URLSearchParams(url.search)
			queryparams.set('page', page)

			const response = await GET(`?${queryparams.toString()}`) // NO TARGET NEEDED SINCE SAME AS CURRENT PAGE
			
			d3.selectAll('section.templates-container div.templates-layout')
			.each(function (d) {
				const section = d3.select(this)
				response.sections.find(s => s.status === d.status).templates.forEach(p => section.call(renderVignette, p))
			})

			if (response.count < <%- locals.stats.filtered %>) lazyloading = false
			else main.select('.lds-ellipsis').classed('hide', true)
		}
	}

	async function deleteTemplates (templates) {
		const data = templates.data()
		const message = `Do you really want to delete the following ${data.length > 1 ? data.length : ''} template${data.length > 1 ? 's' : ''}: <strong>${data.map(d => d.title || '<%- vocabulary["untitled template"][locals.metadata.page.lang] %>').join('</strong>, <strong>')}</strong>? <br/><small>* This operation cannot be undone.</small>` // TO DO: TRANSLATE
		const form = { action: '/delete/templates',  method: 'GET' }
		const opts = [{ node: 'button', type: 'submit', label: `Delete ${data.length > 1 ? 'them' : 'it'}`, resolve: true }]
		data.forEach(d => opts.unshift({ node: 'input', type: 'hidden', name: 'id', value: d.id }))

		renderFormModal({ message: message, formdata: form, opts: opts })
	}

	// THIS IS FOR PUBLISHING FROM THE PRIVATE VIEW
	// async function publish (ids) {
	// 	//if (!ids) ids = meta.filter(d => d.status === 1).map(d => d.pid) // THIS IS TO PUBLISH ALL PUBLISHABLE PADS AT ONCE: MOVE THIS TO BACKEND
	// 	const result = await POST('/publish', { type: 'pads', ids: ids })
	// 	if (result.status === 200) window.location.href = `/${lang}/browse/public`
	// }
	async function unpublish (ids) {
		if (!ids) ids = data.filter(d => d.status === 2).map(d => d.id)
		return await POST('/unpublish', { type: 'templates', ids: ids })
	}

	window.addEventListener('keyup', function (e) {
		e = e || event
		if (e.key === 'Escape' || e.keyCode === 27) d3.selectAll('.modal').remove()
	})


	window.onload = function () {
		// renderStats(<%- JSON.stringify(locals.stats) %>)
		renderSections(<%- JSON.stringify(locals.sections) %>, <%- JSON.stringify(locals.stats.breakdown) %>)
	}

	// window.addEventListener('resize', resizeAll)

</script>

</body>
</html>