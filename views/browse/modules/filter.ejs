<%
	
	// CREATE ALIASES
	const object = locals.metadata.page.object
	const query = locals.metadata.page.query
	const language = locals.metadata.page.language

%>

<% if (locals.stats?.total > 0) { %>
	<nav id='search-and-filter' class='lg'>
		<form autocomplete='off'>
			<!-- ADD ALL EXISTING HEADER QUERIES THAT ARE NOT IN THE MENU (THIS IS FOR PERSISTENCE OF VIEW PARAMETERS) -->
			<% 
				const menu_keys = locals.filters_menu.map(d => Object.keys(d)).flat()
				const view_params = Object.keys(query).filter(key => !menu_keys.includes(key) && !['search', 'status'].includes(key)) 

				view_params.forEach(d => {
					query[d].forEach(c => {
			%>
				<input type='hidden' name='<%- d %>' value='<%- c %>'>
			<% 
					}) 
				})
			%>

			<div class='search'>
				<% if (query?.search?.length) { %>
					<input type='text' name='search' id='search-field' class='has-value' value='<%- query?.search %>' onblur='fixLabel(this)'>
				<% } else { %>
					<input type='text' name='search' id='search-field' onblur='fixLabel(this)'>
				<% } %>
				<label for='search-field'><%- vocabulary['search'][language](object === 'contributors') %></label>
				<button id='search' type='submit'><img src='/imgs/icons/i-search.svg'></button>
			</div>
			<% if (locals.stats?.persistent_breakdown?.length > 1) { %>
				<div class='status'>
					<menu>
						<% locals.stats?.persistent_breakdown?.forEach(d => { %>
							<li>
								<input type='checkbox' class='toggle' id='status-<%- d.status %>' value='<%- d.status %>' name='status' onchange='this.form.requestSubmit[this.form.querySelector("button#search")] || this.form.submit()' <% if (!query?.status || query?.status?.map(d => +d).includes(d.status)) { %>checked<% } %>>
								<label for='status-<%- d.status %>' data-content='<%- d.count %>'></label>
								<p>
									<%- vocabulary['status'][language](object, d.status, d.count) %>
								</p>
							</li>
						<% }) %>
					</menu>
				</div>
			<% } %>
			<% if (locals.filters_menu?.length) { %>
				<button type='button' class='expand-filters' onclick='expandfilters(this)'>
					<div class='line l1'></div><div class='line l2'></div><div class='line l3'></div>
				</button>
				<div class='filters'>
					<% locals.filters_menu?.forEach(d => { %>
						<section>
							<% for (let key in d) { %>
								<div class='filter'>
									<input type='text' id='<%- key %>' onblur='fixLabel(this)'>
									<label for='<%- key %>'><%- vocabulary[key.slice(0, -1).replace(/_/g, ' ')]?.[language](true).capitalize() || vocabulary[key.replace(/_/g, ' ')]?.[language].capitalize() || key.capitalize() %></label>
									<div class='dropdown'>
										<menu>
											<% d[key]?.forEach(c => { %>
												<li>
													<input type='checkbox' value='<%- c.id %>' id='<%- key %>-<%- c.id %>' name='<%- key %>' <% if (query?.[key]?.includes(c.id.toString())) { %>checked<% } %>>
													<label for='<%- key %>-<%- c.id %>'><%- (c.name?.capitalize() || vocabulary['unknown'][language]) %><span class='count'><%- c.count %></span></label>
												</li>
											<% }) %>
										</menu>
									</div>
								</div>
							<% } %>
						</section>
					<% }) %>
					<div class='break'></div>
					<button type='submit' class='submit-filters'>
						<%- vocabulary['apply filters'][language] %>
					</button>
				</div>
			<% } %>
		</form>
	</nav>
<% } else { %>
	<nav><p><%- vocabulary['no entries'][language] %></p></nav> 
<% } %>

<script type='text/javascript'>
	function expandfilters (node) {
		d3.select(node).toggleClass('close')
		const filters = node.form.querySelector('.filters')
		const padding = filters.querySelector('section').getBoundingClientRect().height / 2
		// WE NEED TO MANUALLY ADD THE BOTTOM PADDING BECAUSE IT IS NOT COMPUTED IN THE scrollHeight
		if (filters.style.maxHeight) {
			filters.style.maxHeight = null
			filters.style.overflow = 'hidden'
		} else filters.style.maxHeight = `${filters.scrollHeight + padding}px`
	}
	d3.selectAll('.filter input[type=text]')
	.on('keyup', function () {
		const node = this
		const dropdown = d3.select(node).findAncestor('filter').select('.dropdown')
		dropdown.selectAll('menu li')
			.classed('hide', function () {
				return !this.textContent.trim().toLowerCase()
				.includes(node.value.trim().toLowerCase())
			})
	}).on('focus', function () {
		const dropdown = d3.select(this).findAncestor('filter').select('.dropdown')
		const filters = d3.select(this).findAncestor('filters')
		if (dropdown.node()) dropdown.node().style.maxHeight = `${Math.min(dropdown.node().scrollHeight, 300)}px`
		if (filters) filters.node().style.overflow = 'visible'

		dropdown.selectAll('label, a').on('mousedown', function () { 
			d3.event.preventDefault()
			// this.previousElementSibling.setAttribute('checked', '')
		})
	}).on('blur', function () {
		const dropdown = d3.select(this).findAncestor('filter').select('.dropdown')
		if (dropdown.node()) dropdown.node().style.maxHeight = null
	})
</script>