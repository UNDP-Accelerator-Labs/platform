<%
	// CREATE ALIASES
	const modules = locals.metadata.site.modules
	const space = locals.metadata.page.space
	const object = locals.metadata.page.object
	const query = locals.metadata.page.query
	const language = locals.metadata.page.language
	const rights = locals.metadata.user.rights
    const explorationVocab = vocabulary['exploration'][language];

    const sections = locals.pinboard?.sections
    const section = query.section?.[0]
%>

<div class='pinboard-section-container'>
	<nav class='pinboard-sections'>
		<div class='inner'>
			<div class='m lg xl xxl'>
				<menu class="google-translate-attr">
					<% sections?.forEach(d => { %>
						<li class='<% if (d.id === +section) { %>active<% } %>'>
							<div onclick='makeEditable(this, this.nextElementSibling)'><i class="material-icons google-translate-attr">edit</i></div>
							<a href='?pinboard=<%- pinboard.id %>&section=<%- section %>'>
								<button>
									<div class='section-title' data-placeholder='Section' onfocus='this.classList.add("focus")' onkeydown='checkForEnter(event, this)' onblur='partialSave("section")' contenteditable><%- d.title %></div><!-- TO DO: TRANSLATE -->
									<div class='count'><%- d.count ?? 0 %></div>
								</button>
							</a>
						</li>
					<% }) %>
					<li>
						<button class='new-section'>
							<div class='section-title' onfocus='makeEditable(this)' onkeydown='checkForEnter(event, this);' onblur='addSection(this)' data-placeholder='Section' contenteditable>Add (a) section(s)</div>
						</button>
						<button class='add' onclick='addSection(this.previousElementSibling)'></button>
						<!-- TO DO: TRANSLATE -->
						<!-- <button class='new-section' onclick='addSection(this)' contenteditable>Add a section</button> -->
					</li>
				</menu>
			</div>
		</div>
	</nav>
	<div class='description<% if (!sections?.length) { %> hide<% } %>' data-placeholder='Provide a short description for this pinboard.' onblur='partialSave("section")' contenteditable><%- sections.find(d => d.id === +section)?.description %></div><!-- TO DO: TRANSLATE -->
</div>

<script type='text/javascript'>
	function makeEditable (node, a_node) {
		const sel = d3.select(node)
		const li = sel.findAncestor('li')
		sel.classed('focus', !sel.classed('focus'))

		if (sel.classed('focus')) {
			li.classed('editing', true)
			
			if (a_node) {
				const a = d3.select(a_node)
				const href = a.attr('href')
				a.attrs({
					'href': null,
					'data-href': href
				})
			}
			selectElementContents(li.select('button div.section-title').node())
		}
	}
	async function addSection (node) {
		const formdata = { action: '/save/pinboard-section',  method: 'POST' }
		const message = 'Create one or more sections.' // TO DO: TRANSLATE
		const opts = []
		const target_opts = (<%- JSON.stringify(Object.keys(locals.filters_menu?.[0])) %>)
			.map(key => { return { label: key.capitalize(), value: key, type: 'radio' } })
		
		<% if (section) { %>
			opts.push({ node: 'input', type: 'hidden', name: 'id', value: <%- section %> })
		<% } %>
		opts.push({ node: 'input', type: 'hidden', name: 'pinboard', value: <%- locals.pinboard.id %> })
		opts.push({ node: 'input', type: 'radio', name: 'section_type', value: 'single', placeholder: `Create a single new section named <strong>${node.innerText}</strong> and assign pads manuallyâ€”you can change this name later.`, checked: true, default: true, fn: enableSave  })
		opts.push({ node: 'input', type: 'hidden', name: 'sections', value: node.innerText })
		opts.push({ node: 'input', type: 'radio', name: 'section_type', value: 'multiple', placeholder: 'Generate sections from filters.', checked: false, default: true, fn: enableSave })
		
		opts.push({ node: 'select', name: 'sections', label: 'Sections', options: target_opts, classname: 'section-options hide', fn: setSections })
		
		opts.push({ node: 'button', type: 'submit', label: '<%- vocabulary["save"][language] %>' })
		//d3.select('.modal input[name=sections]:checked').node().value
		const sections = await renderFormModal({ message, formdata, opts })
		console.log(sections)

		function setSections (data) {
			const { value } = data || {}
			const form = d3.select(this.form)
			const platform_filters = <%- JSON.stringify(locals.filters_menu?.[0]) %>
			form.addElems('input', 'multiple-section-id', platform_filters[value]?.map(d => d.id) || [])
				.attrs({
					'type': 'hidden',
					'name': value,
					'value': d => d
				})
			form.select('button[type=submit]').node().disabled = false
		}

		function enableSave (data) {
			const { value } = data || {}
			const form = d3.select(this.form)

			if (value === 'multiple') {
				// SHOW DROPDOWN AND DISABLED INPUT HIDDEN
				form.select('input[name=sections][type=hidden]').node().disabled = true
				form.selectAll('li.section-options').classed('hide', false)
					.selectAll('.dropdown li input[type=radio]')
					.each(function () { this.disabled = false })
			} else {
				form.select('input[name=sections][type=hidden]').node().disabled = false
				const li = form.selectAll('li.section-options').classed('hide', true)
				li.select('input.dropbtn').each(function () {
					this.value = null
					fixLabel(this)
				})
				li.selectAll('.dropdown li').classed('active', false)
					.selectAll('input[type=radio]')
					.each(function () { 
						this.disabled = true
						this.checked = false
					})
				form.selectAll('input.multiple-section-id').remove()
			}

			form.select('button[type=submit]').node().disabled = (form.select('input[value=multiple]:checked').node() && !form.selectAll('input.multiple-section-id').size())
		}
		
	}
</script>