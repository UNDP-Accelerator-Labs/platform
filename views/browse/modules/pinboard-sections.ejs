<%
	// CREATE ALIASES
	const activity = locals.metadata.page.activity
	const modules = locals.metadata.site.modules
	const space = locals.metadata.page.space
	const object = locals.metadata.page.object
	const query = locals.metadata.page.query
	const language = locals.metadata.page.language
	const rights = locals.metadata.user.rights
    const explorationVocab = vocabulary['exploration'][language];

    const sections = locals.pinboard?.sections
    const section = query.section?.[0]

    const editable = (activity !== 'preview' && locals.pinboard?.editable)
    const editAll = false // THIS IS TO ENABLE EDITING OF ALL SECTION TITLES SIMULTANEOUSLY

    const enableSingleSection = false
%>


<menu class="google-translate-attr">
	<% sections?.forEach(d => { %>
		<li class='<% if (d.id === +section) { %>active<% } %>'>
			<% if (editable && (d.id === +section || editAll)) { %>
				<div onclick='makeEditable(this, this.nextElementSibling)'><i class="material-icons google-translate-attr">edit</i></div>
			<% } %>
			<% if (d.id !== +section) { %>
				<% if (editable && editAll) { %>
					<a href='?pinboard=<%- pinboard.id %>&section=<%- d.id %>'>
						<button>
							<div class='section-title' data-placeholder='Section' onfocus='this.classList.add("focus")' onkeydown='checkForEnter(event, this)' onblur='partialSave("section-title", <%- d.id %>)'><%- d.title %></div><!-- TO DO: TRANSLATE -->
							<div class='count'><%- d.count ?? 0 %></div>
						</button>
					
					</a>
				<% } else { %>
					<a href='?pinboard=<%- pinboard.id %>&section=<%- d.id %>'>
						<button>
							<div class='section-title' data-placeholder='Section'><%- d.title %></div><!-- TO DO: TRANSLATE -->
							<div class='count'><%- d.count ?? 0 %></div>
						</button>
					</a>
				<% } %>
			<% } else { %>
				<% if (editable) { %>
					<button>
						<div class='section-title' data-placeholder='Section' onfocus='this.classList.add("focus"); this.parentNode.parentNode.classList.add("editing")' onkeydown='checkForEnter(event, this)' onblur='partialSave("section-title", <%- d.id %>)' contenteditable><%- d.title %></div><!-- TO DO: TRANSLATE -->
						<div class='count'><%- d.count ?? 0 %></div>
					</button>
				<% } else { %>
					<button>
						<div class='section-title' data-placeholder='Section'><%- d.title %></div><!-- TO DO: TRANSLATE -->
						<div class='count'><%- d.count ?? 0 %></div>
					</button>
				<% } %>
			<% } %>
		</li>
	<% }) %>
	<% if (editable && !sections.length) { %>
		<li>
			<button class='new-section'>
				<div class='section-title' onfocus='makeEditable(this)' onkeydown='checkForEnter(event, this);' onblur='addSection(this)' data-placeholder='Section' contenteditable>Add (a) section(s)</div>
			</button>
			<button class='add' onclick='addSection(this.previousElementSibling)'></button>
			<!-- TO DO: TRANSLATE -->
			<!-- <button class='new-section' onclick='addSection(this)' contenteditable>Add a section</button> -->
		</li>
	<% } %>
	<!-- TO DO: PROBABLY AN OPTION TO REMOVE ALL sections -->
</menu>



<script type='text/javascript' nonce='<%= locals.metadata.page.nonce %>'>
	function makeEditable (node, a_node) {
		const sel = d3.select(node)
		const li = sel.findAncestor('li')
		sel.classed('focus', !sel.classed('focus'))

		if (sel.classed('focus')) {
			li.classed('editing', true)
			
			if (a_node) {
				const a = d3.select(a_node)
				const href = a.attr('href')
				a.attrs({
					'href': null,
					'data-href': href
				})
			}
			li.select('button div.section-title').node().contentEditable = true
			selectElementContents(li.select('button div.section-title').node())
		}
	}
	async function addSection (node) {
		const formdata = { action: '/save/pinboard-section',  method: 'POST' }
		const message = 'Create one or more sections.' // TO DO: TRANSLATE
		const opts = []

		<% // MAKE SURE THERE IS MORE THAN ONE location, template, OR mobilization (platform_filter) TO TURN INTO SECTIONS
			const target_opts = [] 
			const platform_filters = locals.filters_menu?.[0]
			for (let key in platform_filters) {
				if (platform_filters[key].length > 1) {
					target_opts.push({ label: key.capitalize(), value: key, type: 'radio' })
				}
			}
		%>

		const target_opts = (<%- JSON.stringify(target_opts) %>)
		
		<% if (section) { %>
			opts.push({ node: 'input', type: 'hidden', name: 'id', value: <%- section %> })
		<% } %>
		opts.push({ node: 'input', type: 'hidden', name: 'pinboard', value: <%- locals.pinboard.id %> })
	
		<% if (enableSingleSection) { %>
			opts.push({ node: 'input', type: 'radio', name: 'section_type', value: 'single', placeholder: `Create a single new section named <strong>${node.innerText}</strong> and assign pads manuallyâ€”you can change this name later.`, checked: true, default: true, fn: enableSave  })
			opts.push({ node: 'input', type: 'hidden', name: 'sections', value: node.innerText })
		<% } %>
		
		opts.push({ node: 'input', type: 'radio', name: 'section_type', value: 'multiple', placeholder: 'Generate sections from filters.', checked: <%- !enableSingleSection %>, default: true, fn: enableSave })
		
		opts.push({ node: 'select', name: 'sections', label: 'Sections', options: target_opts, classname: 'section-options<% if (enableSingleSection) { %> hide<% } %>', fn: setSections })
		
		opts.push({ node: 'button', type: 'submit', label: '<%- vocabulary["save"][language] %>', disabled: <%- !enableSingleSection %> })
		//d3.select('.modal input[name=sections]:checked').node().value
		const sections = await renderFormModal({ message, formdata, opts })

		function setSections (data) {
			const { value } = data || {}
			const form = d3.select(this.form)
			const platform_filters = <%- JSON.stringify(locals.filters_menu?.[0]) %>
			form.addElems('input', 'multiple-section-id', platform_filters[value]?.map(d => d.id) || [])
				.attrs({
					'type': 'hidden',
					'name': value,
					'value': d => d
				})
			form.select('button[type=submit]').node().disabled = false
		}

		function enableSave (data) {
			const { value } = data || {}
			const form = d3.select(this.form)

			if (value === 'multiple') {
				// SHOW DROPDOWN AND DISABLED INPUT HIDDEN
				form.select('input[name=sections][type=hidden]').node().disabled = true
				form.selectAll('li.section-options').classed('hide', false)
					.selectAll('.dropdown li input[type=radio]')
					.each(function () { this.disabled = false })
			} else {
				form.select('input[name=sections][type=hidden]').node().disabled = false
				const li = form.selectAll('li.section-options').classed('hide', true)
				li.select('input.dropbtn').each(function () {
					this.value = null
					fixLabel(this)
				})
				li.selectAll('.dropdown li').classed('active', false)
					.selectAll('input[type=radio]')
					.each(function () { 
						this.disabled = true
						this.checked = false
					})
				form.selectAll('input.multiple-section-id').remove()
			}

			form.select('button[type=submit]').node().disabled = (form.select('input[value=multiple]:checked').node() && !form.selectAll('input.multiple-section-id').size())
		}	
	}
	(function scrollToActiveSection (node) {
		if (!mediaSize) var mediaSize = getMediaSize()
		if (!['xs', 'sm'].includes(mediaSize)) {
			const menu = d3.select('.pinboard-sections menu')
			const section = menu.select('li.active').node()
			if (section?.node()) {
				menu.node().scrollTo({
					top: 0,
					left: section.offsetLeft,
					behavior: 'smooth'
				})
			}
		}
	})()
</script>