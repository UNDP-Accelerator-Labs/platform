<!DOCTYPE html>
<html lang='<%- locals.lang %>'>
<head>

	<%- include ('partials/head.ejs') %> 

</head>


<body>
<!-- INCLUDE MULTI-LANGUAGE VOCABULARY FOR ejs -->
<%- include ('partials/navigate.ejs') %> 
<%# include ('partials/menu-filters.ejs') %> 

<main id='mobilize-existing'>
	<div class='inner'>
		<section class='new'>
		<a href='../mobilize/new'><button id='add'><div>+</div></button></a>
	</section>
		<section class='overview'></section>
	</div>
	<div class='lds-ellipsis hide'><div></div><div></div><div></div><div></div></div>
</main>

<footer>
	
</footer>



<script type='text/javascript'>
	const searchForm = d3.select('#filter form')
	const search = d3.select('#filter')
	const filters = d3.select('.filters')
	const main = d3.select('main')
		.call(multiSelection, { class: '.template.visible .inner', filter: d => d.editable })
	const mobilizationsLayout = main.select('.inner')
	const overview = mobilizationsLayout.select('.overview')
	
	const queryparams = <%- JSON.stringify(locals.queryparams) %>;
	var lang = '<%- locals.lang %>'; // THIS NEEDS TO BE A GLOBAL VARIABLE
	const rights = <%- locals.rights %>;

	let page = <%- locals.page %>;
	var lazyloading = false

	function renderStats (counts) {
		// THIS IS THE META INFORMATION
		const stats = overview.addElems('div', 'summary-statistics', [counts])

		const count = stats.addElems('div', 'statistic count')
		.addElems('h1')
			.html(d => d.filtered)
		count.addElems('small')
			.html(d => `/ ${d.total}`)
		count.addElems('br')
		count.addElems('small', 'light')
			.html(d => vocabulary['cohort']['<%- locals.lang %>'](d.total !== 1))
	}	


	function renderSections (data, counts) {
		// MAKE SURE WE ONLY KEEP THE SECTIONS WHERE THERE ARE PADS
		data = data.filter(d => counts.map(c => c.status).includes(d.status))
		const sections = mobilizationsLayout.addElems('section', 'mobilizations-container', data)
		sections.addElems('div', 'pub-status')
			.addElems('label')
			.html(d => {
				const count = counts.find(c => c.status === d.status).count
				return vocabulary['cohort status']['<%- locals.lang %>'](count, d.status)
			})
		sections.addElems('div', 'mobilizations-layout')
			.each(function (d) {
				const section = d3.select(this)
				section.classed(d.label, true)
				d.mobilizations.forEach(p => section.call(renderVignette, p))
			})
	}

	function renderVignette (section, data) {
		const mobilizations = section.addElem('div', 'mobilization')
			.datum(data)
		.addElems('div', 'inner')
			// .addElems('a', 'mobilization-link')
			// .attr('href', d => d.editable ? `../../edit/template?id=${d.id}` : `../../view/template?id=${d.id}`)
		.addElems('div', 'body')

		const head = mobilizations.addElems('div', 'head')

		head.addElems('div', 'media media-title')
			.html(d => d.title || `[${vocabulary['untitled template']['<%- locals.lang %>']}]`)
		head.addElems('div', 'meta meta-contributor')
			.html(d => `Deployed on ${d.start_date}`)
		const content = mobilizations.addElems('div', 'content')
		
		const template_title = content.addElem('div', 'media media-txt')
			.attr('data-placeholder', '<%- vocabulary["untitled template"][locals.lang] %>')
		template_title.addElems('i').html(d => 'This mobilization uses: ')// TO DO: TRANSLATE
		template_title.addElems('a')
			.attr('href', d => `../edit/template?id=${d.template_id}`)
			.html(d => d.template_title)

		const contributions = content.addElem('div', 'meta meta-stats')
			.addElems('a')
			.classed('disabled', d => !d.pads)
			.attr('href', d => `../browse/pads/public?mobilizations=${d.id}`)
		.addElems('h1')
			.html(d => d.pads)
		contributions.addElems('small')
		contributions.addElems('br')
		contributions.addElems('small', 'light')
			.html(d => vocabulary['pad']['<%- locals.lang %>'](d.pads !== 1))

		const contributors = content.addElem('div', 'meta meta-stats')
			.addElems('a')
		.addElems('h1')
			.html(d => d.contributors)
		contributors.addElems('small')
		contributors.addElems('br')
		contributors.addElems('small', 'light')
			.html(d => 'contributors') // TO DO: TRANSLATE

		content.addElems('div', 'btn-group')
		.addElems('form', 'pad-actons', function (d) {
			const opts = []
			console.log(d)
			// opts.push({ node: 'button', type: 'button', label: 'Contribute' })
			// opts.push({ action: '../browse/pads/private', method: 'GET', node: 'button', type: 'submit', label: 'Browse contributions', name: 'mobilizations', value: d.id })
			// opts.push({ node: 'button', type: 'submit', label: 'Browse contributions', name: 'mobilizations', value: d.id })
			// TO DO: TERMINATE DEPLOYMENT
			// if (d.editable) opts.push({ node: 'button', type: 'button', label: 'Delete', fn: deleteMobilizations })
			if (d.status === 1) opts.push({ action: '/demobilize', method: 'GET', node: 'button', type: 'submit', label: 'Demobilize' })
			return opts
		}).attrs({ 'action': d => d.action, 'method': d => d.method })
		.each(function (d) {
			const sel = d3.select(this)
			const mobilization = sel.findAncestor('mobilization')
			sel.addElems('input')
				.attrs({ 'type': 'hidden', 'name': 'id', 'value': mobilization.datum().id })
			sel.addElems('a')
				.attr('href', '#')
			.addElems(d.node, 'btn-overlay')
				.attrs({ 'type': d.type, 'name': d.name, 'value': d.value })
				.html(d => d.label)
			.on('click', _ => {
				if (d.fn) d.fn(mobilization)
			})
		})

		// const count = mobilizations.addElems('div', 'foot')
		// 	.addElems('div', 'media meta-stats')
		// 	.addElems('h1')
		// 	.html(d => d.pads)
		// count.addElems('small')
		// count.addElems('br')
		// count.addElems('small', 'light')
		// 	.html(d => 'contributions') // TO DO: TRANSLATE

	}



	window.onscroll = async function (ev) {
		if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight && !lazyloading) {
			console.log('hit the bottom')
			main.select('.lds-ellipsis').classed('hide', false)
			
			page ++
			lazyloading = true
			
			// const searchData = new FormData(searchForm.node()) // TO DO: REINTEGRATE THIS IF A FILTER MENU IS ADDED
			const obj = {}
			obj.page = page
			obj.view = queryparams.view
			// searchData.forEach((v, k) => !['type', 'query'].includes(k) ? obj[k] ? obj[k].push(v) : obj[k] = [v] : obj[k] = v)

			const response = await POST('', obj) // NO TARGET NEEDED SINCE SAME AS CURRENT PAGE

			d3.selectAll('section.mobilizations-container div.mobilizations-layout')
			.each(function (d) {
				const section = d3.select(this)
				response.sections.find(s => s.status === d.status).mobilizations.forEach(p => section.call(renderVignette, p))
			})

			if (response.count < <%- locals.stats.filtered %>) lazyloading = false
			else main.select('.lds-ellipsis').classed('hide', true)
		}
	}

	async function deleteMobilizations (mobilizations) {
		const data = mobilizations.data()
		const message = `Do you really want to delete the following ${data.length > 1 ? data.length : ''} template${data.length > 1 ? 's' : ''}: <strong>${data.map(d => d.title || '<%- vocabulary["untitled template"][locals.lang] %>').join('</strong>, <strong>')}</strong>? <br/><small>* This operation cannot be undone.</small>` // TO DO: TRANSLATE
		const form = { action: '/delete/mobilizations',  method: 'GET' }
		const opts = [{ node: 'button', type: 'submit', label: `Delete ${data.length > 1 ? 'them' : 'it'}`, resolve: true }]
		data.forEach(d => opts.unshift({ node: 'input', type: 'hidden', name: 'id', value: d.id }))

		renderFormModal({ message: message, formdata: form, opts: opts })
	}


	async function unpublish (ids) {
		if (!ids) ids = data.filter(d => d.status === 2).map(d => d.id)
		return await POST('/unpublish', { type: 'mobilizations', ids: ids })
	}

	window.addEventListener('keyup', function (e) {
		e = e || event
		if (e.key === 'Escape' || e.keyCode === 27) d3.selectAll('.modal').remove()
	})


	window.onload = function () {
		renderStats(<%- JSON.stringify(locals.stats) %>)
		renderSections(<%- JSON.stringify(locals.sections) %>, <%- JSON.stringify(locals.stats.breakdown) %>)
	}


</script>

</body>
</html>