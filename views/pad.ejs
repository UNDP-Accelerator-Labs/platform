<!DOCTYPE html>
<html lang='<%- locals.metadata.page.lang %>'>
<head>

<%- include ('partials/head.ejs') %> 
<script type='text/javascript' src='/js/pad.js'></script>

<link rel='stylesheet' href='https://unpkg.com/leaflet@1.6.0/dist/leaflet.css'
	integrity='sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=='
	crossorigin=''/>
<script src='https://unpkg.com/leaflet@1.6.0/dist/leaflet.js'
	integrity='sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=='
	crossorigin=''></script>


<script type="text/javascript">
	// THE FOLLOWING IS INSPIRED BY: 
	// https://www.programmersought.com/article/5248306768/
	// https://stackoverflow.com/questions/926916/how-to-get-the-bodys-content-of-an-iframe-in-javascript
	function loadHTML(url, source, target) {
		const iframe = document.createElement('iframe')
		iframe.style.display = 'none'
		iframe.src = url

		if (iframe.attachEvent){
			iframe.attachEvent('onload', function () {
				extractTarget(this, source, target)
			})
		} else {
			iframe.onload = function () {
				extractTarget(this, source, target)
			}
		}

		function extractTarget (node, source, target) {
			const doc = d3.select(node.contentDocument || node.contentWindow.document)
				.select(source)
				.attr('id', 'reference')
				.classed('split-screen', true)
			doc.selectAll('.focus').classed('focus', false)
			d3.select(target).html(doc.node().outerHTML)
			d3.select(node).remove()
		}
		document.body.appendChild(iframe)
	}
</script>

</head>

<body>

<%# include ('partials/navigate.ejs') %> 
<%# include ('partials/menu-templates.ejs') %>

<%- include ('partials/multi-language.ejs') %> 

<%- include ('partials/menu-languages.ejs') %> 

<!-- IF THIS PAD IS A FOLLOW UP, THEN DO NOT ADD THE MENU TO SAVE SCREEN SPACE -->
<% if (!(locals.source && locals.metadata.page.query?.display?.includes('adjacent'))) { %><%- include ('partials/menu-logo.ejs') %><% } %>

<%- include ('partials/modals.ejs') %> 


<% 
	if (!locals.templated) locals.templated = locals.display_template !== null
%>

<% if (locals.source) { %>
	<% if (locals.metadata.page.query?.display?.includes('adjacent')) { %>
		<div class='display-option split-screen'><a><button>Hide source</button></a></div> <!-- TO DO: TRANSLATE -->
		<div id='source'></div>
		<script type='text/javascript'>
			loadHTML('../edit/pad?id=<%- locals.source %>', '#pad', '#source')
			
			// const url = new URL(window.location) // url IS ALREADY DEFINED SOMEWHERE ELSE
			const queryparams = new URLSearchParams(url.search)
			queryparams.delete('display')

			d3.select('div.display-option a').attr('href', `?${queryparams.toString()}`)
		</script>
	<% } else { %>
		<div class='display-option'><a><button>Display source</button></a></div> <!-- TO DO: TRANSLATE -->
		<script type='text/javascript'>
			const queryparams = new URLSearchParams(url.search)
			queryparams.append('display', 'adjacent')

			d3.select('div.display-option a').attr('href', `?${queryparams.toString()}`)
		</script>
	<% } %>
<% } %>

<main id='pad' class='pad <% if (locals.source && locals.metadata.page.query?.display?.includes("adjacent")) { %>split-screen<% } %>'>
	<!-- BELOW ARE ENGAGEMENT FEATURES -->
	<!-- <% if (['edit', 'view'].includes(locals.metadata.page.activity) && (locals.data && locals.data.published)) { %>
		<div class='engagement-input-group'>
			<div class='engagement bookmark <% if (locals.data.bookmarked) { %>active<% } %>' data-type='bookmark' data-count='<%- locals.engagement["bookmark"] %>'>
				<div class='label'><%- vocabulary['bookmark'][locals.metadata.page.lang](locals.data.bookmarked) %></div>
			</div>
			<ul>
				<% ['inspiration', 'approval', 'flag'].forEach(type => { 
					let count = locals.engagement[`${type}s`] || 0
					let icon
					let label
					let active = false

					if (type === 'bookmark') {
						icon = 'bookmark'
						label = 'Bookmark'
						active = locals.data.bookmarked
					}
					else if (type === 'inspiration') {
						icon = 'wb_sunny'
						label = 'Inspiring'
						active = locals.data.inspired
					}
					else if (type === 'approval') {
						icon = 'thumb_up'
						label = 'Tested and validated'
						active = locals.data.approved
					}
					else if (type === 'flag') {
						icon = '()'
						label = 'For Tomorrow'
						active = locals.data.flagged
					}
				%>
					<li>
						<button class='engagement <% if (active) { %>active<% } %>' data-type='<%- type %>' data-count='<%- count %>'>
							<i class='material-icons-outlined'><%- icon %></i>
							<small><%- label %></small>
						</button>
					</li>
				<% }) %>
			</ul>
		</div>
	<% } %> -->
	<div class='inner'>
		<% if (['contribute', 'edit'].includes(locals.metadata.page.activity)) { %>
			<div class='meta-status status-<%- locals.data?.status || 0 %>'>
				<div class='btn-group'>
					<form method='GET' action='/publish/pads'>
						<input type='hidden' name='id' value='<%- locals.metadata?.page?.query?.id?.[0] %>'>
						<% if (locals.data?.status !== 1) { %><button type='submit' class='publish' disabled>Publish</button>
						<% } else if (locals.data?.status === 1) { %><button type='submit' class='publish'>Publish</button>
						<% } %>
					</form>
					<form method='POST' action='/generate/pdf'>
						<input type='hidden' name='id' value='<%- locals.metadata?.page?.query?.id?.[0] %>'>
						<input type='hidden' name='lang' value='<%- locals.metadata?.page?.lang %>'>
						<!-- TO DO: THIS DOES NOT WORK WHEN THE PAD HAS JUST BEEN CREATED -->
						<!-- AND MAKE SURE ALL FIELDS ARE CLEARED BEFORE SHOWING THIS -->
						<!-- AS ESSENTIALLY THIS IS PUBLISHING THE PAD -->
						<% if (locals.data?.status === 0 || !locals.data?.status) { %><button type='submit' class='generate-pdf' disabled>Generate PDF</button>
						<% } else if (locals.data?.status > 0) { %><button type='submit' class='generate-pdf'>Generate PDF</button>
						<% } %>
					</form>
				</div>
			</div>
		<% } %>

		<div class='head'>
			<% if (['contribute', 'edit'].includes(locals.metadata.page.activity)) { %>
				<% if (locals.metadata.page.activity === 'edit') { %>
					<!-- <a href='javascript:history.back()' class='return'><%- vocabulary['back to browse'][locals.metadata.page.lang] %></a> -->
					<a href='<%- locals.metadata.page.referrer || "/en/browse/pads/private" %>' class='return'><%- vocabulary['back to browse'][locals.metadata.page.lang] %></a>
				<% } %>
				<div class='title' data-placeholder='<%- vocabulary["untitled pad"][locals.metadata.page.lang] %>' onfocus='this.classList.add("focus")' onblur='partialSave("title")' contenteditable></div>
			<% } else { %>
				<a href='<%- locals.metadata.page.referrer || "/en/browse/pads/private" %>' class='return'><%- vocabulary['back to browse'][locals.metadata.page.lang] %></a>
				<div class='title' data-placeholder='<%- vocabulary["untitled pad"][locals.metadata.page.lang] %>'></div>
				<div class='contributor'><%- vocabulary['credit'][locals.metadata.page.lang](locals.data.contributor, locals.data.contributorname) %></div>
			<% } %>
		</div>
		<div class='body'>
			<% if (locals.templated) { %>
				<div class='description-layout layout view'><!-- THIS IS ALWAYS IN VIEW MODE IF DISPLAYED -->
					<!-- TO DO: TRANSLATE THIS -->
					<div class='media-container txt-container'>
						<div class='media media-txt'>
							<i>This pad is based on: </i>
							<a href='/<%- locals.metadata.page.lang %>/view/template?id=<%- locals.display_template.id %>'>
							<%- locals.display_template.title %></a>
						</div>
					</div>
					<div class='media-container txt-container'>
						<div class='media media-txt'>
							<%- locals.display_template.description %>
						</div>
					</div>
				</div>
			<% } %>
			
			<!-- <section class='media-layout layout <%- locals.metadata.page.activity %>'>
				<div class='input-type'>
					<label><%- vocabulary['media'][locals.metadata.page.lang] %></label>
				</div>
			</section> -->

			<% if (['contribute', 'edit'].includes(locals.metadata.page.activity) && (!locals.templated)) { %>
				<div class='media-input-group input-group'>
					<button id='input-media-section' title='Add a section.'><i class='material-icons'>add_circle</i></button>
						
					<div class='vertical-separator'></div>
					<!-- TO DO: TRANSLATE title INFO -->
					<form action='/upload/img' method='POST' enctype='multipart/form-data'>
						<input type='file' id='input-media-img' name='img' accept='image/*, .pdf' onchange='uploadImg(this.form, "<%- locals.metadata.page.lang %>")' multiple>
						<label for='input-media-img' title='Upload an image. You can also use the “i” key as a keyboard shortcut.'><i class='material-icons'>add_photo_alternate</i></label>
					</form>
					<form action='/upload/video' method='POST' enctype='multipart/form-data'>
						<input type='file' id='input-media-video' name='video' accept='video/mp4,video/x-m4v,video/webm,video/*' onchange='uploadVideo(this.form, "<%- locals.metadata.page.lang %>")'>
						<label for='input-media-video' title='Add a video. You can also use the “v” key as a keyboard shortcut.'><i class='material-icons'>ondemand_video</i></label>
					</form>

					<button id='input-media-drawing' title='Add a drawing. You can also use the “d” key as a keyboard shortcut.'><i class='material-icons'>gesture</i></button>
					<button id='input-media-txt' title='Add a text block. You can also use the “t” key as a keyboard shortcut.'><i class='material-icons'>text_fields</i></button>
					<button id='input-media-embed' title='Embed a link or HTML code. Simply paste the link to the video to see it displayed. You can also use the “e” key as a keyboard shortcut.'><i class='material-icons'>code</i></button>
					<button id='input-media-checklist' title='Add a checklist. You can also use the “l” key as a keyboard shortcut.'><i class='material-icons'>check_box</i></button>
					<button id='input-media-radiolist' title='Add a radiolist. You can also use the “r” key as a keyboard shortcut.'><i class='material-icons'>radio_button_checked</i></button>

					<div class='vertical-separator'></div>
					<button id='input-meta-sdgs' title='Add one or more SDG tag(s).'><i class='material-icons'>public</i></button>
					<button id='input-meta-tags' title='Add one or more thematic area tag(s).'><i class='material-icons'>style</i>
				</div>
			<% } %>
			<!-- <section class='meta-layout layout <%- locals.metadata.page.activity %>'>
				<div class='input-type'>
					<label><%- vocabulary['metadata'][locals.metadata.page.lang] %></label>
				</div>
			</section> -->
			<!-- <% if (['contribute', 'edit'].includes(locals.metadata.page.activity)) { %>
				<div class='meta-input-group input-group'>
					<button id='input-meta-location' title='Add a location.'><i class='material-icons'>add_location</i></button>
					<button id='input-meta-sdgs' title='Add one or more SDG tag(s).'><i class='material-icons'>public</i></button>
					<button id='input-meta-tags' title='Add one or more thematic area tag(s).'><i class='material-icons'>style</i></button>
				</div>
			<% } %> -->
		</div>
	</div>
</main>

<!-- THIS IS THE INITIAL SETTING FOR A COMMENTS MODULE: THIS IS NOT USED -->
<% if (locals.messages && locals.messages.length) { %>
<footer id='pad'>
	<div class='inner'>
		<% locals.messages.forEach(m => { %>
			<div class='approval-message'>
				<small><%- vocabulary['tested and approved'][locals.metadata.page.lang](m.commentator, m.name) %></small>
				<p><%- m.message %></p>
			</div>
		<% }) %>
	</div>
</footer>
<% } %>


<script type='text/javascript'>
	// ADD ALL INTERACTION WITH MEDIA AND META INPUT BUTTONS
	d3.select('.media-input-group #input-media-section')
	.on('click', _ => addSection({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addSection({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-media-drawing')
	.on('click', _ => addDrawing({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addDrawing({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-media-txt')
	.on('click', _ => addTxt({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addTxt({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-media-embed')
	.on('click', _ => addEmbed({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addEmbed({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-media-checklist')
	.on('click', _ => addChecklist({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addChecklist({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-media-radiolist')
	.on('click', _ => addRadiolist({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addRadiolist({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	// const centerpoint = <% if (locals.metadata.user.centerpoint) { %>[<%- JSON.stringify(locals.metadata.user.centerpoint) %>]<% } else { %>[]<% } %>;
	// d3.select('.media-input-group #input-meta-location')
	// .on('click', _ => addMap({ centerpoints: centerpoint }, '<%- locals.metadata.page.lang %>', true))
	// .on('touchend', _ => addMap({ centerpoints: centerpoint }, '<%- locals.metadata.page.lang %>', true))

	// d3.select('.meta-input-group #input-meta-sdgs')
	d3.select('.media-input-group #input-meta-sdgs')
	.on('click', _ => addSDGs({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addSDGs({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	// d3.select('.meta-input-group #input-meta-tags')
	d3.select('.media-input-group #input-meta-tags')
	.on('click', _ => addTags({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addTags({ lang: '<%- locals.metadata.page.lang %>', focus: true }))


	// ADD ALL INTERACTION WITH ENGAGEMENT BUTTONS
	// d3.selectAll('.engagement-input-group .engagement')
	// .on('click', async function () {
	// 	const sel = d3.select(this)
	// 	const type = sel.attr('data-type')
	// 	let count = parseInt(sel.attr('data-count'))
	// 	let active = sel.classed('active')

	// 	if (type === 'approval') {
	// 		if (!active) {
	// 			const message = 'Describe in a few sentences how you tested and validated this solution.' // TO DO: TRANSLATE
	// 			const form = { action: '/validate',  method: 'POST' }
	// 			const opts = []
	// 			opts.push({ node: 'input', type: 'hidden', name: 'pad', value: <%- locals.pad || JSON.stringify(null) %> })
	// 			opts.push({ node: 'input', type: 'hidden', name: 'active', value: !active })
	// 			opts.push({ node: 'input', type: 'hidden', name: 'type', value: type })
	// 			opts.push({ node: 'input', type: 'hidden', name: 'path', value: new URL(window.location) })
	// 			opts.push({ node: 'textarea', name: 'message', placeholder: 'What did you do?' }) // TO DO: TRANSLATE
	// 			opts.push({ node: 'button', type: 'submit', label: 'Validate the solution', resolve: true }) // TO DO: TRANSLATE
	// 			renderFormModal({ message: message, formdata: form, opts: opts })
	// 		}
	// 	} else {
	// 		const result = await POST('/engage', { pad: <%- locals.pad || JSON.stringify(null) %>, active: !active, type: type })
	// 		active = result.bool
	// 		count = active ? count + 1 : count - 1
	// 		sel.classed('active', active)
	// 			.attr('data-count', count)
	// 		if (type === 'bookmark') sel.select('div.label').html(vocabulary['bookmark']['<%- locals.metadata.page.lang %>'](active))
	// 	}
	// })


	const templated = <%- locals.templated %>;
	const httpquery = <%- JSON.stringify(locals.metadata.page.query) %>;
		
	let activity = '<%- locals.metadata.page.activity %>';
	const editing = ['contribute', 'edit'].includes(activity)
	const rights = <%- locals.metadata.user.rights %>;

	let published = false

	const main = d3.select('#pad')
	const head = main.select('.head')
	const body = main.select('.body')
	const foot = main.select('.foot')
	const footer = d3.select('footer')

	// ADD THE INTERACTION BEHAVIOR FOR THE TITLE INPUT
	head.select('.title')
	.on('keydown', function () {
		const evt = d3.event
		if (evt.code === 'Enter' || evt.keyCode === 13) {
			evt.preventDefault()
			this.blur()
		}
	})

	// THE FOUR FOLLOWING FUNCTIONS ARE FOR THE SAVING MECHANISM
	function retrieveItems (sel, datum, items) {
		// MEDIA
		if (['img', 'mosaic', 'video'].includes(datum.type)) {
			if (datum.type === 'mosaic') datum.has_content = datum?.srcs?.filter(b => b)?.length > 0
			else datum.has_content = datum.src !== null && datum.src !== undefined
			items.push(datum)
		}
		else if (datum.type === 'drawing') {
			datum.has_content = datum.shapes?.length > 0
			items.push(datum)
		}
		else if (datum.type === 'txt') {
			datum.txt = sel.select('.media-txt').node().innerText
			datum.has_content = datum.txt?.trim()?.length > 0
			items.push(datum)
		}
		else if (datum.type === 'embed') {
			datum.html = sel.select('.media-embed').node().innerHTML
			datum.has_content = datum.html?.trim()?.length > 0
			items.push(datum)
		}
		else if (['checklist', 'radiolist'].includes(datum.type)) {
			datum.options = datum.options.filter(b => b.name && b.name.length)
			datum.has_content = datum.options.filter(b => b.checked).length > 0
			items.push(datum)
		}
		// META
		// else if (datum.type === 'location') {
		// 	items.push(datum)
		// }
		else if (datum.type === 'sdgs') {
			// d.options = d.options.filter(c => datum.name && datum.name.length)
			datum.has_content = datum?.sdgs?.length > 0
			items.push(datum)
		}
		else if (datum.type === 'tags') {
			// d.options = d.options.filter(c => datum.name && datum.name.length)
			datum.has_content = datum?.tags?.length > 0
			items.push(datum)
		}
		else if (datum.type === 'skills') {
			// d.options = d.options.filter(c => datum.name && datum.name.length)
			datum.has_content = datum?.tags?.length > 0
			items.push(datum)
		}
		else if (datum.type === 'datasources') {
			// d.options = d.options.filter(c => datum.name && datum.name.length)
			datum.has_content = datum?.tags?.length > 0
			items.push(datum)
		}
	}
	function getStatus () {
		console.log('getting status')
		const completion = []
		const title = head.select('.title').node().innerText
		completion.push(title?.trim()?.length > 0)

		function checkCompletion (d) {
			if (d.required === null || d.required === undefined) throw 'there is no requirement: this should not happen'
			if (d.required === false) return true
			else return d.has_content === true
		}

		main.selectAll('.layout:not(.description-layout)')
		.each(function (d) {
			const items = []
			const sel = d3.select(this)
			
			sel.selectAll('.media-container, .meta-container')
			.each(function (c) {
				const sel = d3.select(this)
				const ingroup = sel.findAncestor('group-container')	
				// GROUPS
				if (c.type === 'group') {
					// const groupitems = []
					sel.selectAll('.media-group-items')
						.each(function () { 
							const sel = d3.select(this)
							const subitems = []
							sel.selectAll('.media-container, .meta-container')
								.each(function (b) { 
									retrieveItems(d3.select(this), b, subitems) 
								})
							completion.push(!subitems.map(checkCompletion).unique().includes(false))
						})
				} else {
					if (!ingroup) retrieveItems(sel, c, items)
					completion.push(!items.map(checkCompletion).unique().includes(false))
				}
			})
		})

		return !completion.unique().includes(false)
	}
	function compileContent (attr) {
		const content = {}
		// COLLECT TITLE
		let title = head.select('.title').node().innerText
		if (title.length > 99) title = `${title.slice(0, 98)}…`
		// MAYBE INCLUDE ALERT IF title IS EMPTY
		// COLLECT ALL MEDIA
		const sections = []
		main.selectAll('.layout:not(.description-layout)')
		.each(function (d) {
			const items = []
			const sel = d3.select(this)
			
			sel.selectAll('.media-container, .meta-container')
			.each(function (c) {
				const sel = d3.select(this)
				const ingroup = sel.findAncestor('group-container')	
				// GROUPS
				if (c.type === 'group') {
					const groupitems = []
					sel.selectAll('.media-group-items')
						.each(function () { 
							const sel = d3.select(this)
							const subitems = []
							sel.selectAll('.media-container, .meta-container')
								.each(function (b) { 
									retrieveItems(d3.select(this), b, subitems) 
								})
							groupitems.push(subitems)
						})
					c.items = groupitems
					items.push(c)
				} else {
					if (!ingroup) retrieveItems(sel, c, items)
				}
			})

			d.title = sel.select('.section-header label').node().innerText
			d.lead = (sel.select('.media-lead').node() || {}).innerText
			d.instruction = (sel.select('.media-repeat button div').node() || {}).innerText
			d.items = items
			sections.push(d)
		})
		
		const location = main.select('.location-container').node() ? main.select('.location-container').datum() : null // THIS IS NOT NEEDED
		// let skills = main.select('.skills-container').node() ? main.select('.skills-container').datum().tags.map(d => d.name) : null

		// THIS SHOULD REPLAE WHAT IS ABOVE
		let allTags = []
		if (main.select('.sdgs-container').node()) {
			main.selectAll('.sdgs-container').each(d => {
				d.sdgs.forEach(c => {
					// THE FILTERING HERE IS MAINLY FOR LEGACY, BECAUSE ORIGINALLY sdgs WERE ONLY THE keys, NOT THE { key: INT, name: STR } OBJECT
					if (Object.keys(c).includes('key') && Object.keys(c).includes('name')) {
						allTags.push({ tag_id: c.key, tag_name: c.name, type: d.type })
					}
				})
			})
		}
		main.selectAll('.tags-container, .datasources-container, .skills-container')
		.each(d => {
			// THE FILTERING HERE IS MAINLY FOR LEGACY, BECAUSE ORIGINALLY tags WERE ONLY THE names, NOT THE { key: INT, name: STR } OBJECT
			d.tags.forEach(c => {
				if (Object.keys(c).includes('id') && Object.keys(c).includes('name')) {
					allTags.push({ tag_id: c.id, tag_name: c.name, type: d.type })
				}
			})
		})
		content.tagging = allTags
		
		// COMPILE FULL TXT FOR SEARCH
		const fullTxt = `${title}\n\n
			${sections.map(d => d.title).join('\n\n').trim()}\n\n
			${sections.map(d => d.lead).join('\n\n').trim()}\n\n
			${sections.map(d => d.items).flat().filter(d => d.type === 'txt')
				.map(d => d.txt).join('\n\n').trim()}\n\n
			${sections.map(d => d.items).flat().filter(d => d.type === 'embed')
				.map(d => d.html).join('\n\n').trim()}\n\n
			${sections.map(d => d.items).flat().filter(d => d.type === 'checklist')
				.map(d => d.options.filter(c => c.checked).map(c => c.name)).flat().join('\n\n').trim()}
			${sections.map(d => d.items).flat().filter(d => d.type === 'radiolist')
				.map(d => d.options.filter(c => c.checked).map(c => c.name)).flat().join('\n\n').trim()}
			${sections.map(d => d.items).flat().filter(d => d.type === 'group').map(d => d.items)
				.filter(d => d.type === 'txt')
				.map(d => d.txt).join('\n\n').trim()}\n\n
			${sections.map(d => d.items).flat().filter(d => d.type === 'group').map(d => d.items)
				.filter(d => d.type === 'embed')
				.map(d => d.html).join('\n\n').trim()}\n\n
			${sections.map(d => d.items).flat().filter(d => d.type === 'group').map(d => d.items)
				.filter(d => d.type === 'checklist')
				.map(d => d.options.filter(c => c.checked).map(c => c.name)).flat().join('\n\n').trim()}
			${sections.map(d => d.items).flat().filter(d => d.type === 'group').map(d => d.items)
				.filter(d => d.type === 'radiolist')
				.map(d => d.options.filter(c => c.checked).map(c => c.name)).flat().join('\n\n').trim()}`

		// COLLECT DELETED MATERIAL (THIS WILL BE CLEARED FROM SESSIONSTORAGE UPON SUCCESS)
		const deletion = JSON.parse(window.sessionStorage.getItem('deleted')) || []
	
		// IF THIS IS A NEW PAD, CHECK WHETHER IT HAS A SOURCE
		if (activity === 'contribute') content.source = <%- locals.source || JSON.stringify(locals.source) %>;
		// ALWAYS SAVE THE TITLE
		content.title = title 
		if (!attr || ['title', 'lead', 'media', 'meta', 'group'].includes(attr) || sections.map(d => d.items).flat().unique('type', true).includes(attr)) {
			content.sections = JSON.stringify(sections)
		}
		// if (!attr || attr === 'meta' || meta.unique('type', true).includes(attr)) content.meta = JSON.stringify(meta)
		if (!attr || attr === 'location') content.location = JSON.stringify(location)
		// if (!attr || attr === 'sdgs') content.sdgs = JSON.stringify(sdgs)
		// if (!attr || attr === 'tags') content.tags = JSON.stringify(tags)
		// if (!attr || attr === 'skills') content.skills = JSON.stringify(skills)
		// if (!attr || attr === 'datasources') content.datasources = JSON.stringify(datasources)
		
		// FULL TEXT
		// if (!attr || ['title', 'lead', 'txt', 'embed', 'checklist', 'radiolist', 'tags', 'group'].includes(attr)) 
		// ALWAYS SEND fullTxt
		content.full_text = fullTxt

		// ALWAYS SEND status
		let status = 0
		const completion = getStatus()

		if (!published) {
			if (completion) status = 1
		} else {
			if (completion) status = 2
			else status = 0
		}
		content.status = status
		// ALWAYS SEND deletion IF THERE IS SOMETHING TO DELET
		if (deletion.length) content.deletion = deletion

		return content
	}
	function partialSave (attr) {
		console.log('saving')
		// FIRST CHECK IF THIS IS A NEW PAD
		const content = compileContent(attr)
		// CHECK IF THE PAD ALREADY HAS AN id IN THE DB
		const url = new URL(window.location)
		const queryparams = new URLSearchParams(url.search)
		const id = queryparams.get('id')
		if (id) content.id = +id
		const template = queryparams.get('template')
		if (template) content.template = +template
		const mobilization = queryparams.get('mobilization')
		if (mobilization) content.mobilization = +mobilization

		POST('/save/pad', content)
		.then(res => {
			// ADD THE NOTIFICATION
			window.sessionStorage.removeItem('changed-content')
			const menu_logo = d3.select('nav#site-title .inner')
			menu_logo.select('.save').classed('saved', true)
				.select('button')
				.html(vocabulary['changes saved']['<%- locals.metadata.page.lang %>'])
			window.setTimeout(_ => {
				menu_logo.selectAll('div.create, h1, h2').classed('hide', false)
				menu_logo.selectAll('div.save').classed('hide', true)
			}, 1000)
			
			// REMOVE ITEMS TO DELETE
			window.sessionStorage.removeItem('deleted')
			// CHANGE THE URL TO INCLUDE THE PAD ID
			if (!id) { // INSERT
				queryparams.append('id', res.object)
				url.search = queryparams.toString()
				// BASED ON:
				// https://usefulangle.com/post/81/javascript-change-url-parameters
				// https://www.30secondsofcode.org/blog/s/javascript-modify-url-without-reload
				const nextURL = url.toString().replace('contribute', 'edit')
				const nextTitle = 'Update pad' // TO DO: RESET FOR TEMPLATE
				const nextState = { additionalInformation: 'Updated the URL with JS' }
				window.history.pushState(nextState, nextTitle, nextURL)
				// REMOVE THE templates MENU
				d3.select('nav#filter').remove()

				// SET THE ID FOR THE PUBLISH AND GENERATE FORMS
				d3.selectAll('div.meta-status form input[name="id"]').attr('value', res.object)
				d3.select('div.meta-status form input[name="id"] button.publish').attr('disabled', content.status === 1)
				d3.select('div.meta-status form input[name="id"] button.generate-pdf').attr('disabled', content.status > 0)
				// d3.select('div.meta-status form.generate-pdf input[name="id"]').attr('value', res.object)
			}
		}).catch(err => { throw err })
		// POST NEW TAGS (THIS USED TO BE IN THE BACKEND, BUT MOVED IT HERE)
		// MOVE THIS BACK TO THE PADS
		// if (content.tags) {
		// 	POST('https://undphqexoacclabsapp01.azurewebsites.net/api/thematic_areas', { tags: content.tags }).then(res => console.log(res))
		// }
	}


	let keyTrack = []
	window.addEventListener('keydown', function (e) {
		e = e || event
		keyTrack.push(e.keyCode)

		if (editing) {
			// SHIFT + ENTER LEAVES THE FOCUSED CELL
			if (keyTrack.includes(16) && e.keyCode === 13 
				&& (main.selectAll('.media-container.focus, .meta-container.focus').size())
			) { 
				e.preventDefault()
				main.selectAll('.media-container, .meta-container').classed('focus', false)
					.selectAll('.media-txt, .media-embed, .media-checklist .list-item, .media-radiolist .list-item')
				.each(function () { this.blur() })
				main.selectAll('.media-container .inset, .meta-container .inset').style('max-height', null)
				autofillTitle()
			}
			// PROVIDE HIGHLIGHT FEEDBACK
			if (
				![head.selectAll('div.title').nodes(), main.selectAll('.section-header label').nodes(), main.selectAll('input[type=text], input[type=number]').nodes()].flat().includes(document.activeElement)
				&& !(main.selectAll('.layout.focus *:focus').size())
				&& !(main.selectAll('.media-container.focus, .meta-container.focus').size() || 
					main.selectAll('.media-container *:focus, .meta-container *:focus').size())
				&& !d3.select('.modal').node()
				&& !templated
			) {
				if (e.key === 'i' || e.keyCode === 73) main.select('label[for=input-media-img]').classed('highlight', true)
				if (e.key === 'd' || e.keyCode === 68) main.select('label[for=input-media-drawing]').classed('highlight', true)
				if (e.key === 't' || e.keyCode === 84) main.select('label[for=input-media-txt]').classed('highlight', true)
				if (e.key === 'l' || e.keyCode === 76) main.select('label[for=input-media-checklist]').classed('highlight', true)
				if (e.key === 'r' || e.keyCode === 82) main.select('label[for=input-media-radiolist]').classed('highlight', true)
				if (e.key === 'v' || e.keyCode === 86) main.select('label[for=input-media-video]').classed('highlight', true)
				if (e.key === 'e' || e.keyCode === 69) main.select('label[for=input-media-embed]').classed('highlight', true)
			}
		}
	})
	window.addEventListener('keyup', function (e) {
		e = e || event
		if (editing) {
			if (
				![head.selectAll('div.title').nodes(), main.selectAll('.section-header label').nodes(), main.selectAll('input[type=text], input[type=number]').nodes()].flat().includes(document.activeElement)
				&& !(main.selectAll('.layout.focus *:focus').size())
				&& !(main.selectAll('.media-container.focus, .meta-container.focus').size() || 
					main.selectAll('.media-container *:focus, .meta-container *:focus').size())
				&& !d3.select('.modal').node()
				&& !templated
			) {
				if (!templated) {
					if (e.key === 'i' || e.keyCode === 73) {
						main.select('label[for=input-media-img]').classed('highlight', false)
						d3.select('#input-media-img').node().click()
					}
					if (e.key === 'v' || e.keyCode === 86) {
						main.select('label[for=input-media-video]').classed('highlight', false)
						d3.select('#input-media-video').node().click()
					}
					if (e.key === 'd' || e.keyCode === 68) {
						main.select('label[for=input-media-drawing]').classed('highlight', false)
						d3.select('#input-media-drawing').node().click()
					}
					if (e.key === 't' || e.keyCode === 84) {
						main.select('label[for=input-media-txt]').classed('highlight', false)
						d3.select('#input-media-txt').node().click()
					}
					if (e.key === 'e' || e.keyCode === 69) {
						main.select('label[for=input-media-embed]').classed('highlight', false)
						d3.select('#input-media-embed').node().click()
					}
					if (e.key === 'l' || e.keyCode === 76) {
						main.select('label[for=input-media-checklist]').classed('highlight', false)
						d3.select('#input-media-checklist').node().click()
					}
					if (e.key === 'r' || e.keyCode === 82) {
						main.select('label[for=input-media-radiolist]').classed('highlight', false)
						d3.select('#input-media-radiolist').node().click()
					}
				}
			} else {
				if ((d3.select(e.srcElement).classed('media')
						|| d3.select(e.srcElement).classed('meta')
						|| d3.select(e.srcElement).classed('title')
					) && !(
					[e.srcElement.nodeName, e.srcElement.tagName].map(d => d.toLowerCase()).includes('input') 
					&& (
						d3.select(e.srcElement).findAncestor('search')?.node() 
						|| d3.select(e.srcElement).findAncestor('filter-or-add')?.node()
						)
					)
				) {
					switchButtons('<%- locals.metadata.page.lang %>') 
					// THIS PICKS UP ON KEYSTROKES IN media OR meta OUTSIDE OF INPUT FIELDS 
				}
			}
		}
			
		keyTrack = keyTrack.filter(d => d !== e.keyCode)
	})
	window.addEventListener('mouseup', function (e) {
		e = e || event
		if (editing) {
			const focused_node = d3.select('.focus')
			const target = d3.select(e.target)
			const media = target.findAncestor('media')
			const meta = target.findAncestor('meta')
			const section = target.findAncestor('layout')
			const inputgroup = target.findAncestor('input-group')
			if (!inputgroup) {
				main.selectAll('.layout').filter(function () { return section ? this !== section.node() : true })
					.classed('focus', false)
			}
			const containers = main.selectAll('.media-container, .meta-container')
				.filter(function () { 
					// return media ? this !== media.node() : meta ? this !== meta.node() : true 
					if (media) return this !== media.node()
					else if (meta) return this !== meta.node()
					else if (d3.select(this).classed('group-container focus') && inputgroup) return false
					else return true
				})
			containers.classed('focus', false)
				.selectAll('.inset')
				.style('max-height', null)
			main.selectAll('.media-input-group label, .meta-input-group label').classed('highlight', false)
			
			// console.log(document.activeElement)
			// console.log(document.activeElement.classList)
			// console.log(document.activeElement.classList.contains('title'))

			if (focused_node.node() && focused_node.classed('title')) {
				console.log('in')
				if (!document.activeElement.classList.contains('title')) {
					focused_node.classed('focus', false)
					console.log('in to out')
				}
			} else {
				autofillTitle()
				console.log('out')
			}
		}
	})

	// POPULATE THE PAGE
	if (activity === 'contribute' && templated) {
		const data = <%- JSON.stringify(locals.display_template || {}) %>;

		if (data.sections) {
			const title_instruction = data.sections.map(d => d.items || d.structure).flat()
				.find(d => d.type === 'title')?.instruction
			if (title_instruction) head.select('.title').attr('data-placeholder', title_instruction)

			data.sections.forEach(async d => {
				if (httpquery?.display?.includes('slideshow')) {
					await addSlides({ data: d, lang: '<%- locals.metadata.page.lang %>' })
					// TO DO: ADD END SLIDE FOR PUBLICATION AND PDF EXPORT
				} else addSection({ data: d, lang: '<%- locals.metadata.page.lang %>' })
			})
		}
		// CLEAR CHANGES
		window.sessionStorage.removeItem('changed-content')
	}
	else if (['edit', 'view'].includes(activity)) {
		const data = <%- JSON.stringify(locals.data || {}) %>;

		if (data.title) head.select('.title').html(data.title)
		published = data.status === 2

		if (data.sections) {
			data.sections.forEach(async d => {
				if (httpquery?.display?.includes('slideshow')) {
					await addSlides({ data: d, lang: '<%- locals.metadata.page.lang %>' })
					// TO DO: ADD END SLIDE FOR PUBLICATION AND PDF EXPORT
				} else addSection({ data: d, lang: '<%- locals.metadata.page.lang %>' })
			})
		}

		// CLEAR CHANGES
		window.sessionStorage.removeItem('changed-content')
	} else addSection(null, '<%- locals.metadata.page.lang %>')

	function addSlides (kwargs) { // NOTE: SLIDES ARE NECESSARILY TEMPLATED OR IN VIEW MODE ONLY
		const { data, lang, sibling, focus } = kwargs || {}
		let { title, lead, structure, items, repeat, group, instruction } = data || {}
		if (!title) title = ''
		if (!lead) lead = ''
		if (!structure) structure = []
		if (!items) items = []

		if (editing && templated && (!items.length || sibling)) items = JSON.parse(JSON.stringify(structure)) // TO DO: THIS IS NOT OPTIMAL, BUT DEEP COPY IS NEEDED

		// DETERMINE ID TO KNOW WHETHER SECTION CAN BE REMOVED
		const section_id = uuidv4()

		return new Promise(resolve => {
			d3.selectAll('.media-layout').classed('focus', false)

			const section = d3.select('main#pad div.inner div.body')
				.insertElem(sibling || '.media-input-group', 'section', `media-layout layout ${activity}`)
				.classed('repeat', repeat || false)
				// .classed('focus', focus && !templated)
				.datum({ type: 'section', title, lead, structure, items, repeat, group })
			// .on('click.focus', function () { d3.select(this).classed('focus', editing && !templated) })
			
			// THIS ALL GOES INTO A SLIDE: THIS IS ACTUALLY THE ONLY THING THAT CHANGES
			if (title || lead) {
				const titleslide = section.addElems('div', 'title-slide')

				if (title) {
					titleslide.addElems('div', 'section-header')
						.addElems('label')
						.html(d => d.title)
				}
				
				if (lead) {
					const medialead = new Media({
						parent: titleslide.node(), 
						type: 'lead', 
						datum: { type: 'lead', lead: lead },
						lang: lang
					})
					// REMOVE THE PLACEMENT OPTIONS: TITLES CANNOT BE MOVED
					if (medialead.opts) medialead.opts.remove()

					medialead.media.html(d => d.lead)
				}
			}
			// END SLIDE

			if (repeat) {
				// HIDE THE PREVIOUS REPEAT BUTTONS FOR THE GROUP
				d3.selectAll('.layout.repeat').filter(d => d.group === group)
					.select('.repeat-container').classed('hide', true)

				const mediarepeat = new Media({
					parent: section.node(), 
					type: 'repeat', 
					datum: { type: 'repeat', instruction: instruction },
					lang: lang
				})
				// REMOVE THE PLACEMENT OPTIONS: TITLES CANNOT BE MOVED
				if (mediarepeat.opts) mediarepeat.opts.remove()
				if (mediarepeat.instruction) mediarepeat.instruction.remove()

				mediarepeat.media.addElems('button')
				.on('click', function () {
					const sel = d3.select(this)
					
					section.findAncestor('pad').selectAll('.body>*')
					.each(async function (d, i) {
						if (this === section.node()) {
							kwargs.sibling = `section:nth-child(${i + 2})`
							kwargs.focus = true
							
							const new_section = await addSlides(kwargs) // THIS TOO IS DIFFERENT TO addSection
							
							partialSave('media')
							initslideshow()
						}
					})
				}).addElems('div').attrs({ 
					'data-placeholder': d => 'Repeat section' // TO DO: TRANSLATION
				}).html(d => d.instruction)
			}

			const displaypromises = []
			if (items.length) {
				section.each(function (d) {
					d.items.forEach(c => displaypromises.push(new Promise(resolvedisplay => {
						populateSection(c, lang, this)
						resolvedisplay()
					})))
				})
			}
			Promise.all(displaypromises).then(_ => resolve(section))

		}).then(section => {
			initslideshow()
			return section.node()
		})
	}
	function initslideshow () {
		// TRANSFORM THE MAIN #pad INTO A SLIDESHOW
		d3.select('#pad').classed('slideshow', true)
		// TRANSFORM ALL .media-container TO .slide
		if (d3.selectAll('.slide').size() === 0) d3.select('#pad .inner .head').classed('slide slide-in-view', true)

		d3.selectAll('.title-slide, .description-layout:not(.hide), .media-layout > .media-container:not(.lead-container):not(.hide), .media-layout > .meta-container:not(.hide)')
			.classed('slide slide-next hide', true)
		// PREVENT GROUPS FROM ANIMATING IN
		d3.selectAll('.media-group-items').classed('animate-in', false)
		// SET THE FOCUS ON THE TITLE SLIDE
		const slides = d3.selectAll('.slide')
		
		// TO DO: IF VIEW === SLIDESHOW
		// 1) CREATE INDEXING OF SECTIONS
		// 2) CREATE NAVIGATION BETWEEN SECTIONS

		// ADD BUTTONS TO NAVIGATE
		d3.select('main#pad.slideshow div.inner')
			.addElems('button', 'slide-nav', [{ label: '&lsaquo;', class: 'prev' }, { label: '&rsaquo;', class: 'next' }])
		.each(function (d) { d3.select(this).classed(d.class, true) })
			.classed('hide', d => {
				const sel = d3.select(this)
				let focus_id = 0
				d3.selectAll('.slide').each(function (c, i) {
					if (d3.select(this).classed('slide-in-view')) focus_id = i
				})
				return (d.class === 'prev' && focus_id === 0) || (d.class === 'next' && focus_id === d3.sels)
			}).html(d => d.label)
		.on('click', d => {
			let focus_id = 0
			d3.selectAll('.slide').each(function (c, i) {
				if (d3.select(this).classed('slide-in-view')) focus_id = i
			})

			if (d.class === 'prev') switchslide(focus_id, focus_id - 1)
			else if (d.class === 'next') switchslide(focus_id, focus_id + 1)
		}).on('mouseup', _ => d3.event.stopPropagation())

		function switchslide (prev, focus) {
			const slides = d3.selectAll('.slide').classed('hide', (d, i) => ![prev, focus].includes(i))
			window.setTimeout(_ => {
				slides.classed('slide-in-view', (d, i) => i === focus)
					.classed('slide-prev', (d, i) => i < focus)
					.classed('slide-next', (d, i) => i > focus)
				// .filter((d, i) => i === prev)
					.on('transitionend', function (d, i) {
						d3.select(this).classed('hide', i !== focus)
					})
			}, 1)
			d3.select('button.slide-nav.prev').classed('hide', focus === 0)
			d3.select('button.slide-nav.next').classed('hide', focus === slides.size() - 1)
		}
		// IF THE SLIDE IN VIEW IS HIDDEN (e.g. AFTER CLICKING ON A REPEAT SECTION BUTTON), THEN AUTO MOVE TO THE NEXT SLIDE
		const slideinview = d3.select('.slide.slide-in-view')
		if (slideinview.classed('hide')) {
			let focus_id = 0
			slides.each(function (c, i) {
				if (d3.select(this).classed('slide-in-view')) focus_id = i
			})
			if (focus_id < slides.size() - 1) switchslide(focus_id - 1, focus_id + 1)
			else switchslide(focus_id + 1, focus_id - 1)
			console.log(slideinview)
			slideinview.classed('slide slide-next slide-prev slide-in-view', false)
		}

		// ADD BUTTON TO SAVE AND GENERATE PDF: TO DO IN consent FORM APP (THIS DOES NOT NEED TO BE IN THE MAIN pads APP)

	}

</script>
</body>
</html>