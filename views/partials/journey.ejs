<%
    const language = locals.metadata.page.language;
    const vocab = vocabulary['journey'][language];
    const app_db = locals.metadata.site.app_db;

    //const { board_id } = await POST('/pin', { board_title: node.value.trim(), object_id: < %- JSON.stringify(locals.pads) % >, action: 'insert', object: '< %- object.slice(0, -1) % >' })
    //window.location = `./pinned?pinboard=${board_id}`
%>
<script type='text/javascript'>
    class Journey {
        constructor() {
            this.past = [];
            this.docs = [];
            this.docLookup = {};
            this.currentId = null;
            this.currentPrompt = '';
            this.mainInput = null;
            this.mainButton = null;
            this.datalist = null;
            this.useFullPromptForSelect = false;

            this.listUpdateActive = false;
            this.listUpdateCbs = [];
            this.collectionId = null;
            this.collectionUpdateCbs = [];

            this.appDb = '<%- app_db %>';
            if (sessionStorage.journeyId) {
                this.currentId = +sessionStorage.journeyId || null;
            }
            if (sessionStorage.journeyPrompt) {
                this.currentPrompt = this.normalizeJourneyPrompt(sessionStorage.journeyPrompt);
            }
        };

        setUseFullPromptForSelect(isUseFull) {
            this.useFullPromptForSelect = isUseFull;
        }

        getInputValue() {
            if (!this.mainInput) {
                return null;
            }
            const node = this.mainInput.node();
            if (!node) {
                return null;
            }
            return node.value;
        }

        normalizeJourneyPrompt(prompt) {
            if (!prompt) {
                return '';
            }
            return prompt.replace(/[\s\n\r]+/g, ' ').trim();
        }

        updateCurrentJourney(curId, curPrompt) {
            const normPrompt = this.normalizeJourneyPrompt(curPrompt);
            this.currentPrompt = normPrompt;
            if (normPrompt !== sessionStorage.journeyPrompt) {
                sessionStorage.journeyPrompt = normPrompt;
                if (!normPrompt) {
                    curId = null;
                }
            }
            this.currentId = curId;
            if (curId !== sessionStorage.journeyId) {
                sessionStorage.journeyId = +curId || 0;
            }
            if (this.mainInput !== null) {
                const mainInput = this.mainInput.node();
                if (mainInput) {
                    if (mainInput.value !== normPrompt) {
                        mainInput.value = normPrompt;
                    }
                }
            }
            this.updateJourneyMainButton(
                this.getJourneyByPrompt(normPrompt)[0],
                curId);
            this.updateJourneyDocs();
        }

        getJourneyById(journeyId) {
            return this.past.reduce((prev, d) => {
                if (d['id'] === journeyId) {
                    return [d['id'], d['prompt']];
                }
                return prev;
            }, [null, '']);
        }

        updateById(newId) {
            const [nextId, nextPrompt] = this.getJourneyById(+newId);
            this.updateCurrentJourney(nextId, nextPrompt);
        }

        getJourneyByPrompt(journeyPrompt) {
            const prompt = this.normalizeJourneyPrompt(journeyPrompt);
            return this.past.reduce((prev, d) => {
                if (d['prompt'] === prompt) {
                    return [d['id'], d['prompt']];
                }
                return prev;
            }, [null, prompt]);
        }

        getShortPrompt(journeyId) {
            return this.past.reduce((prev, d) => {
                if (d['id'] === journeyId) {
                    return d['short'];
                }
                return prev;
            }, '');
        }

        updateJourneyMainButton(journeyId, currentId) {
            if (this.mainButton !== null) {
                this.mainButton.text(
                    journeyId === null
                    ? "<%- vocab['start'] %>"
                    : journeyId !== currentId
                    ? "<%- vocab['continue'] %>"
                    : "<%- vocab['finish'] %>");
            }
            if (this.mainInput !== null) {
                const value = this.getInputValue();
                const normPrompt = this.normalizeJourneyPrompt(value);
                this.mainInput.classed('has-value', !!normPrompt);
            }
        }

        updateJourneyList(cb = null) {
            if (cb) {
                this.listUpdateCbs.push(cb);
            }
            if (this.listUpdateActive) {
                return;
            }
            this.listUpdateActive = true;
            GET('/journey/list?lang=<%- language %>', true, true, true).then((result) => {
                this.listUpdateActive = false;
                const journeys = result['journeys'];
                this.past = journeys;
                const [curId, curPrompt] = this.getJourneyById(this.currentId);
                this.updateCurrentJourney(curId, curPrompt);
                const cbs = this.listUpdateCbs;
                this.listUpdateCbs = [];
                cbs.forEach((curCb) => curCb());
            }).catch((err) => {
                this.listUpdateActive = false;
                if (err && err.status === 401) {
                    this.past = [];
                    const cbs = this.listUpdateCbs;
                    this.listUpdateCbs = [];
                    cbs.forEach((curCb) => curCb());
                    this.updateCurrentJourney(null, '');
                }
                console.error(err);
            });
        }

        updateJourneyDatalist(cb = null) {
            const datalist = this.datalist;
            if (!datalist) {
                return;
            }
            this.updateJourneyList(() => {
                datalist.addElems('option', 'journey-past-elem', this.past)
                .attrs({
                    'value': (d) => this.normalizeJourneyPrompt(d['prompt']),
                    'label': (d) => `<%- vocab['last_access'] %> ${d['last_access_ago']}`,
                });
                cb && cb();
            });
        }

        updateJourneyDocs(cb = null) {
            if (cb) {
                this.collectionUpdateCbs.push(cb);
            }
            const curId = this.currentId;
            if (!curId) {
                this.docs = [];
                this.docLookup = {};
                const cbs = this.collectionUpdateCbs;
                this.collectionUpdateCbs = [];
                this.updateDocs(cbs);
                return;
            }
            if (this.collectionId === curId) {
                return;
            }
            this.collectionId = curId;
            GET(`/journey/collection?journey_id=${curId}`, true, true, true).then((result) => {
                if (this.collectionId !== null && this.collectionId !== curId) {
                    return;
                }
                this.collectionId = null;
                const docs = result['docs'];
                const newLookup = {};
                const appDb = this.appDb;
                docs.forEach((doc) => {
                    if (doc['db'] !== appDb) {
                        return;
                    }
                    newLookup[`${doc['doc_id']}`] = doc['is_relevant'];
                });
                this.docs = docs;
                this.docLookup = newLookup;
                const cbs = this.collectionUpdateCbs;
                this.collectionUpdateCbs = [];
                this.updateDocs(cbs);
            })
            .catch((err) => {
                this.collectionId = null;
                if (err && err.status === 401) {
                    this.docs = [];
                    this.docLookup = {};
                    const cbs = this.collectionUpdateCbs;
                    this.collectionUpdateCbs = [];
                    this.updateDocs(cbs);
                    this.updateCurrentJourney(null, '');
                }
                console.error(err);
            });
        }

        isDocApprove(docId) {
            return this.docLookup[`${docId}`] === true;
        }

        isDocDislike(docId) {
            return this.docLookup[`${docId}`] === false;
        }

        updatePrompt(userPrompt, allowReport) {
            const currentId = this.currentId;
            this.updateJourneyDatalist(() => {
                const [curId, curPrompt] = this.getJourneyByPrompt(userPrompt);
                if (curId !== null && curId === currentId) {
                    if (allowReport) {
                        this.updateJourneyDocs(this.showReport);
                    }
                } else if (curId !== null) {
                    this.updateCurrentJourney(curId, curPrompt);
                } else if (curPrompt) {
                    PUT(`/journey/create`, {
                        'prompt': curPrompt,
                    }, true, true, true).then((result) => {
                        this.updateCurrentJourney(result['journey'], result['prompt']);
                        this.updateJourneyDatalist();
                    }).catch((err) => console.error(err));
                } else {
                    this.updateCurrentJourney(null, '');
                }
            });
        }

        confirmJourneyPrompt(allowReport) {
            const mainInput = this.mainInput;
            if (mainInput === null) {
                return;
            }
            const userPrompt = this.getInputValue();
            this.updatePrompt(userPrompt, allowReport);
        }

        showReport = () => {
            // FIXME: this whole report mechanism is a hack for now!
            function escape(text) {
                return text.replace(
                    /[^0-9A-Za-z\s]/g,
                    (chr) => `&#${chr.charCodeAt(0)};`
                );
            }

            const prompt = escape(this.currentPrompt);
            const links = this.docs.length ? this.docs.map((doc) => {
                const lang = '<%- language %>';
                const end = `/${lang}/view/pad?id=${doc.doc_id}`;
                const link = `${location.origin}${end}`;
                return `<a href="${link}">${link}</a>`; // FIXME
            }).join('</li><li>') : "<%- vocab['doc-help'] %>";
            const message = `<h2>${prompt}</h2><ul><li>${links}</li></ul>`;
            renderPromiseModal({ message, opts: [] })
            .then(() => {})
            .catch((err) => console.error(err));
        }

        maybeAddDatalist(sel) {
            if (this.datalist !== null) {
                return;
            }
            const datalist = sel.addElem('datalist').attrs({
                'id': 'journey-past',
            });
            this.datalist = datalist;
        }

        addJourneyMain(sel) {
            const mainInput = sel.addElem('input')
            .attrs({
                'type': 'text',
                'id': `journey-main`,
                'list': 'journey-past',
            })
            .on('keydown', () => {
                const evt = d3.event;
                if (evt.code === 'Enter' || evt.keyCode === 13) {
                    this.confirmJourneyPrompt(false);
                    evt.preventDefault();
                }
            })
            .on('change', () => {
                const value = this.getInputValue();
                const normPrompt = this.normalizeJourneyPrompt(value);
                this.updateJourneyMainButton(
                    this.getJourneyByPrompt(normPrompt)[0],
                    this.currentId);
            })
            .on('blur', () => this.confirmJourneyPrompt(false));
            this.mainInput = mainInput;
            this.updateCurrentJourney(this.currentId, this.currentPrompt);

            sel.addElem('label')
            .attrs({
                'for': `journey-main`,
            })
            .text("<%- vocab['intro'] %>");
            this.maybeAddDatalist(sel);
            const mainButton = sel.addElem('button')
            .attrs({
                'type': 'button',
            })
            .on('click', () => this.confirmJourneyPrompt(true));
            this.mainButton = mainButton;

            this.updateJourneyDatalist();
        }

        hasJourney() {
            return !!this.currentId && !!this.currentPrompt;
        }

        updateDocs(cbs) {
            const hasJourney = this.hasJourney();
            d3.selectAll('div.journey-doc').styles({
                'display': hasJourney ? null : 'none',
            });
            if (!hasJourney) {
                return;
            }
            const useFull = this.useFullPromptForSelect;
            d3.selectAll('div.journey-doc span select.journey-short')
            .addElems('option', 'journey-short-list', this.past)
            .attrs({
                'value': (d) => d['id'],
            })
            .text((d) => useFull ? d['prompt'] : d['short']);
            const currentId = this.currentId;
            d3.selectAll('div.journey-doc span select.journey-short')
            .each(function () {
                d3.select(this).node().value = currentId;
            })
            d3.selectAll('button.journey-btn-approve').classed('journey-btn-active', (d) => {
                return this.isDocApprove(d.id);
            });
            d3.selectAll('button.journey-btn-dislike').classed('journey-btn-active', (d) => {
                return this.isDocDislike(d.id);
            });
            d3.selectAll('article.pad').classed('journey-article-inactive', (d) => {
                return this.isDocDislike(d.id);
            });
            cbs.forEach((curCb) => curCb());
        }

        setDocAction(docId, isApprove) {
            const journeyId = this.currentId;
            if (!journeyId) {
                return;
            }
            const action = isApprove ? (
                this.isDocApprove(docId) ? 'neutral' : 'approve') : (
                this.isDocDislike(docId) ? 'neutral' : 'dislike');
            PUT('/journey/doc', {
                'doc_id': docId,
                'action': action,
                'journey_id': journeyId,
            }, true, true, true).then((result) => {
                this.updateJourneyDocs();
            }).catch((err) => console.error(err));
        }

        addDocButtons(sel) {
            const doc = sel.addElems('div', 'journey-doc');
            const docSpan = doc.addElem('span');
            docSpan.addElem('span').text("<%- vocab['doc-begin'] %> ");
            const that = this;
            docSpan.addElem('select').classed('journey-short', true)
            .on('change', function() {
                const curId = d3.select(this)?.node()?.value;
                if (curId !== null) {
                    that.updateById(+curId);
                }
            });
            docSpan.addElem('span').text(": ");
            doc.addElem('button')
            .classed('journey-btn-approve', true)
            .text("<%- vocab['doc-approve'] %>")
            .on('click', (d) => {
                this.setDocAction(d.id, true);
            });
            doc.addElem('button')
            .classed('journey-btn-dislike', true)
            .text("<%- vocab['doc-dislike'] %>")
            .on('click', (d) => {
                this.setDocAction(d.id, false);
            });
            this.updateJourneyDocs();
        }
    } // Journey

    const journey = new Journey();
</script>
