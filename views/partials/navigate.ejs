<%- include ('./multi-language.ejs') %>
<header>
	<div class='inner'>
		<ul class='primary'>
			
			<% if (locals.metadata.user.rights > 0) { %>
				<% if (['browse', 'view', 'contribute', 'edit'].includes(locals.metadata.page.activity) && ['pads', 'pad'].includes(locals.metadata.page.object)) { %>
					<li class='active'>
				<% } else { %><li><% } %>
					<a href='/<%- locals.metadata.page.lang %>/browse/pads/private'><button><%- vocabulary['pad'][locals.metadata.page.lang](true).capitalize() %></button></a>
				</li>
			<% } %>
			<% if (locals.metadata.user.rights > 1) { %>
				<% if (['browse', 'view', 'contribute', 'edit'].includes(locals.metadata.page.activity) && ['templates', 'template'].includes(locals.metadata.page.object)) { %>
					<li class='active'>
				<% } else { %><li><% } %>
					<a href='/<%- locals.metadata.page.lang %>/browse/templates/private'><button><%- vocabulary['template'][locals.metadata.page.lang](false, true).capitalize() %></button></a>
				</li>
			<% } %>
			<% if (locals.metadata.user.rights > 1 || locals.metadata.user.participations.length > 0) { %>
				<% if (['browse', 'view', 'contribute', 'edit'].includes(locals.metadata.page.activity) && ['mobilizations', 'mobilization'].includes(locals.metadata.page.object)) { %>
					<li class='active'>
				<% } else { %><li><% } %>
					<a href='/<%- locals.metadata.page.lang %>/browse/mobilizations/ongoing'><button><%- vocabulary['cohort'][locals.metadata.page.lang](true).capitalize() %></button></a>
				</li>
			<% } %>
				
			<li class='placeholder hide'><a><button></button></a></li>
		</ul>
	</li>
</header>

<div class='screen hide'>
</div>
<div class='screen bis hide'>
</div>
<div class='screen ter hide'>
</div>

<script type='text/javascript'>
	// SET PATHS
	const url = new URL(window.location)
	const pathname = `${url.pathname.split('/').slice(2).join('/')}${url.search}`
	d3.select('#lang-en a').attr('href', `/en/${pathname}`)
	d3.select('#lang-fr a').attr('href', `/fr/${pathname}`)
	d3.select('#lang-es a').attr('href', `/es/${pathname}`)
	d3.select('#lang-pt a').attr('href', `/pt/${pathname}`)

	function renderModal (data) {
		const { headline, opts, theme, node } = data

		d3.selectAll('.temp-active').classed('temp-active', false)
		d3.select(node).classed('temp-active', function () { return !d3.select(this).classed('active') })

		d3.select('nav.filter').classed('open', false)
		d3.selectAll('div.screen').classed('hide', true)
		let screen
		if (theme === 'blue' || !theme) screen = d3.select('div.screen').classed('hide', false)
		else if (theme === 'red') screen = d3.select('div.screen.bis').classed('hide', false)

		const modal = screen.addElems('div', `modal ${theme}`)
		modal.addElems('button', 'close')
		.on('click', function () {
			modal.remove()
			d3.selectAll('.temp-active').classed('temp-active', false)
			screen.classed('hide', true)
		}).html('Close')

		const inner = modal.addElems('div', 'inner')
		inner.addElems('h1', 'headline', data.headline ? [data.headline] : [])
			.html(d => d)
		
		inner.addElems('ul', 'opts', data.opts ? [data.opts] : [])
			.addElems('li', 'opt link', d => d)
		.addElems('a')
			.attr('href', d => d.href)
		.addElems('button')
			.each(function (d) { if (d.class) { d3.select(this).classed(d.class, true) } })
			.html(d => d.label)
	}
	function renderPromiseModal (data) {
		const { message, formdata, opts } = data

		return new Promise (resolve => {
			d3.select('nav.filter').classed('open', false)
			d3.selectAll('div.screen').classed('hide', true)
			const screen = d3.select('div.screen.bis').classed('hide', false)
			const modal = screen.addElems('div', 'modal')
			modal.addElems('button', 'close')
			.on('click', function () {
				modal.remove()
				screen.classed('hide', true)
			}).html('Close')

			const inner = modal.addElems('div', 'inner')
			inner.addElems('h1', 'headline', data.headline ? [data.headline] : [])
				.html(d => d)

			inner.addElems('div', 'message', message ? [message] : [])
				.html(d => d)
			.each(function () {
				const input = d3.select(this).select('input[type=text]')
				if (input.node()) input.node().focus()
			})

			inner.addElems('ul', 'opts', opts ? [opts] : [])
				.addElems('li', 'opt link', d => d)
			.each(function (d) {
				const sel = d3.select(this)
				sel.addElems(d.node)
					.attr('type', d.type)
					.html(d.label)
				.on('click', _ => {
					if (typeof d.resolve === 'function') {
						const resolved = d.resolve()
						resolve(resolved)
					}
					else resolve(d.resolve)

					modal.remove()
					screen.classed('hide', true)
				})
			})
		})
	}
	function renderFormModal (data) {
		const { message, formdata, opts, foot } = data

		d3.select('nav.filter').classed('open', false)
		d3.selectAll('div.screen').classed('hide', true)
		const screen = d3.select('div.screen.bis').classed('hide', false)
		const modal = screen.addElems('div', 'modal')
		modal.addElems('button', 'close')
		.on('click', function () {
			modal.remove()
			screen.classed('hide', true)
		}).html('Close')

		const inner = modal.addElems('div', 'inner')
		
		inner.addElems('div', 'message', message ? [message] : [])
			.html(d => d)
		.each(function () {
			const input = d3.select(this).select('input[type=text]')
			if (input.node()) input.node().focus()
		})

		const form = inner.addElems('form', 'modal-form', formdata ? [formdata] : [])
			.attrs({ 'action': formdata.action, 'method': formdata.method || 'GET' })

		form.addElems('ul', 'opts', opts ? [opts] : [])
			.addElems('li', 'opt link', d => d)
			.classed('hide', d => d.type === 'hidden')
		.each(function (d) {
			const sel = d3.select(this)
			sel.addElems(d.node)
				.attrs({ 'type': d.type, 'name': d.name, 'value': d.value })
			.on('blur', function () { if (d.placeholder) fixLabel(this) })
				.html(d.label)
			sel.addElems('label', 'placeholder', _ => d.placeholder ? [d.placeholder] : [])
				.html(c => c)
		})
		form.addElems('div', 'foot', foot ? [foot] : [])
		.each(function (d) {
			const sel = d3.select(this)
			sel.addElems(d.node)
				.attrs({ 'type': d.type, 'name': d.name, 'value': d.value })
			.on('blur', function () { if (d.placeholder) fixLabel(this) })
				.html(d => d.label)
		})
	}
	function renderContactList (data) {
		const { message, formdata, opts, foot } = data

		d3.select('nav.filter').classed('open', false)
		d3.selectAll('div.screen').classed('hide', true)
		const screen = d3.select('div.screen.bis').classed('hide', false)
		const modal = screen.addElems('div', 'modal contact-list')
		modal.addElems('button', 'close')
		.on('click', function () {
			modal.remove()
			screen.classed('hide', true)
		}).html('Close')

		const inner = modal.addElems('div', 'inner')
		
		inner.addElems('div', 'message', message ? [message] : [])
			.html(d => d)
		.each(function () {
			const input = d3.select(this).select('input[type=text]')
			if (input.node()) input.node().focus()
		})

		const form = inner.addElems('form', 'modal-form', formdata ? [formdata] : [])
			.attrs({ 'action': formdata.action, 'method': formdata.method || 'GET' })

		form.addElems('ul', 'opts', opts ? [opts] : [])
			.addElems('li', 'opt link', d => d)
			.classed('hide', d => d.type === 'hidden')
		.each(function (d) {
			const sel = d3.select(this)

			sel.addElems('div', 'hide')
				.addElems(d.node)
				.attrs({ 
					'id': d.name ? `${d.name.simplify()}-${d.value}` : null,
					'type': d.type, 
					'name': d.name, 
					'value': d.value 
				})
			sel.addElems('div', 'grow')
				.addElems('label')
				.attr('for', `${d.name.simplify()}-${d.value}`)
				.html(d.label)
		})
		
		form.addElems('div', 'foot', foot ? [foot] : [])
		.each(function (d) {
			const sel = d3.select(this)

			const filter = sel.addElem('div', 'search')
			filter.addElem('input')
				.attrs({ 'type': 'text', 'name': 'theme', 'id': 'search-field' })
			.on('keypress', async function () {
				const evt = d3.event
				// if (evt.code === 'Enter' || evt.keyCode === 13) searchLocation()
			}).on('blur', function () {
				fixLabel(this)
			})

			filter.addElem('label')
				.attr('for', 'search-field')
				.html(d => d.instruction || vocabulary['search place'][lang])

			filter.addElems('button',  'search')
				// .on('click', searchLocation)
			.addElems('i', 'material-icons')
				.html('search')

			sel.addElems(d.node)
				.attrs({ 'type': d.type, 'name': d.name, 'value': d.value })
			.on('blur', function () { if (d.placeholder) fixLabel(this) })
				.html(d => d.label)
		})
	}

	window.addEventListener('keyup', function (e) {
		e = e || event
		if (e.key === 'Escape' || e.keyCode === 27) {
			if (d3.select('div.screen div.modal button.close').node()) {
				d3.select('div.screen div.modal button.close').node().click()
			}
		}
	})
</script>