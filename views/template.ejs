<!DOCTYPE html>
<html lang='<%- locals.metadata.page.lang %>'>
<head>

<%- include ('partials/head.ejs') %> 

<script type='text/javascript' src='/js/template.js'></script>

<link rel='stylesheet' href='https://unpkg.com/leaflet@1.6.0/dist/leaflet.css'
	integrity='sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=='
	crossorigin=''/>
<script src='https://unpkg.com/leaflet@1.6.0/dist/leaflet.js'
	integrity='sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=='
	crossorigin=''></script>

</head>

<body>

<%# include ('partials/navigate.ejs') %> 

<%- include ('partials/multi-language.ejs') %> 

<%- include ('partials/menu-languages.ejs') %> 
<%- include ('partials/menu-logo.ejs') %> 
<%- include ('partials/modals.ejs') %> 

<!-- NOT SURE THIS IS NECESSARY -->
<nav>
	<div class='inner'>
	</div>
</nav>


<main id='template' class='template'>
	<div class='inner'>
		<div class='head'>
			<% if (['contribute', 'edit'].includes(locals.metadata.page.activity)) { %>
				<% if (locals.metadata.page.activity === 'edit') { %>
					<!-- <a href='javascript:history.back()' class='return'><%- vocabulary['back to browse'][locals.metadata.page.lang] %></a> -->
					<a href='<%- locals.metadata.page.referrer || "/en/browse/templates/private" %>' class='return'><%- vocabulary['back to browse'][locals.metadata.page.lang] %></a>
				<% } %>
				<div class='title' data-placeholder='<%- vocabulary["untitled template"][locals.metadata.page.lang] %>' onblur='partialSave("title")' contenteditable></div>
			<% } else { %>
				<!-- <a href='javascript:history.back()' class='return'><%- vocabulary['back to browse'][locals.metadata.page.lang] %></a> -->
				<a href='<%- locals.metadata.page.referrer || "/en/browse/templates/private" %>' class='return'><%- vocabulary['back to browse'][locals.metadata.page.lang] %></a>
				<div class='title' data-placeholder='<%- vocabulary["untitled template"][locals.metadata.page.lang] %>'></div>
				<div class='contributor'><%- vocabulary['credit'][locals.metadata.page.lang](locals.data.contributor, locals.data.contributorname) %></div>
			<% } %>
		</div>
		<div class='body'>
			<section class='description-layout layout <%- locals.metadata.page.activity %>'>
				<div class='input-type'>
					<label><%- vocabulary['description'][locals.metadata.page.lang] %></label>
				</div>
				<!-- TO DO: TRANSLATE THIS -->
				<div class='media-container txt-container lead' onclick='d3.select(this).classed("focus", true)'>
					<div class='media media-txt template' data-placeholder='<%- vocabulary["missing template description"][locals.metadata.page.lang] %>' onblur='partialSave("description")' contenteditable><%- locals.template_description %></div>
				</div>
			</section>

			<!-- <section class='media-layout layout <%- locals.metadata.page.activity %>'>
				<div class='input-type'>
					<label><%- vocabulary['media'][locals.metadata.page.lang] %></label>
				</div>
			</section> -->

			<% if (['contribute', 'edit'].includes(locals.metadata.page.activity)) { %>
				<div class='media-input-group input-group'>
					<button id='input-media-section' title='Add a section.'><i class='material-icons'>add_circle</i></button>
					<button id='input-media-repeat-section' title='Add a repetitive section.'><i class='material-icons'>loop</i></button>
					<button id='input-meta-group' title='Add a group of inputs.'><i class='material-icons'>dynamic_form</i></button>
						
					<div class='vertical-separator'></div>
					<button id='input-media-txt' title='Request a description. You can also use the “t” key as a keyboard shortcut.'><i class='material-icons'>text_fields</i></button>
					<button id='input-media-checklist' title='Request a response from multiple choices. You can also use the “l” key as a keyboard shortcut.'><i class='material-icons'>check_box</i></button>
					<button id='input-media-radiolist' title='Add a radiolist. You can also use the “r” key as a keyboard shortcut.'><i class='material-icons'>radio_button_checked</i></button>
					<button id='input-media-img' title='Request an image. You can also use the “i” key as a keyboard shortcut.'><i class='material-icons'>insert_photo</i></button>
					<button id='input-media-drawing' title='Request a drawing. You can also use the “d” key as a keyboard shortcut.'><i class='material-icons'>gesture</i></button>
					<button id='input-media-embed' title='Request a link or embedded HMTL code. You can also use the “e” key as a keyboard shortcut.'><i class='material-icons'>code</i></button>
						
					<div class='vertical-separator'></div>
					<button id='input-meta-sdgs' title='Request one or more SDG tag(s).'><i class='material-icons'>public</i></button>
					<button id='input-meta-tags' title='Request one or more thematic area tag(s).'><i class='material-icons'>style</i></button>
					<button id='input-meta-skills' title='Request one or more skill tag(s).'><i class='material-icons'>engineering</i></button>
					<button id='input-meta-datasources' title='Request one or more data source(s).'><i class='material-icons'>analytics</i></button>
				</div>
			<% } %>
			
			<!-- <section class='meta-layout layout <%- locals.metadata.page.activity %>'>
				<div class='input-type'>
					<label><%- vocabulary['metadata'][locals.metadata.page.lang] %></label>
				</div>
			</section>
			<% if (['contribute', 'edit'].includes(locals.metadata.page.activity)) { %>
				<div class='meta-input-group input-group'>
					<button id='input-meta-location' title='Request a location.'><i class='material-icons'>add_location</i></button>
					<button id='input-meta-sdgs' title='Request one or more SDG tag(s).'><i class='material-icons'>public</i></button>
					<button id='input-meta-tags' title='Request one or more thematic area tag(s).'><i class='material-icons'>style</i></button>
				</div>
			<% } %> -->

			<div class='foot'>
				<!--
				<% if (locals.data && locals.data.status > 0) { %>
					<div class='deploy <% if (!locals.template) { %>hide<% }%>'>
						
						<ul>
							<li><a id='template-use'>
								<button>Use template</button>
							</a></li>
							<li><a id='template-deploy'>
								<button>Deploy template</button>
							</a></li>
						</ul>
					</div>
				<% } %>
				-->
			</div>
		</div>
		
	</div>
</main>

<footer>
	<!-- USED BY N PEOPLE IN X EXRCISES -->
</footer>


<script type='text/javascript'>
	// ADD ALL INTERACTION WITH MEDIA AND META INPUT BUTTONS
	d3.select('.media-input-group #input-media-section')
	.on('click', _ => addSection({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addSection({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-media-repeat-section')
	.on('click', _ => addSection({ data: { repeat: true }, lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addSection({ data: { repeat: true }, lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-meta-group')
	.on('click', _ => addGroup({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addGroup({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-media-img')
	.on('click', _ => addImg({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addImg({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	
	d3.select('.media-input-group #input-media-drawing')
	.on('click', _ => addDrawing({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addDrawing({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-media-txt')
	.on('click', _ => addTxt({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addTxt({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	
	d3.select('.media-input-group #input-media-embed')
	.on('click', _ => addEmbed({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addEmbed({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	
	d3.select('.media-input-group #input-media-checklist')
	.on('click', _ => addChecklist({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addChecklist({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-media-radiolist')
	.on('click', _ => addRadiolist({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addRadiolist({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	// d3.select('.media-input-group #input-meta-location')
	// .on('click', _ => addMap(null, '<%- locals.metadata.page.lang %>', true))
	// .on('touchend', _ => addMap(null, '<%- locals.metadata.page.lang %>', true))

	// d3.select('.media-input-group #input-meta-sdgs')
	// .on('click', _ => addSDGs({ sdgs: <%- JSON.stringify(locals.sdgs) || {} %> }, '<%- locals.metadata.page.lang %>', true))
	// .on('touchend', _ => addSDGs({ sdgs: <%- JSON.stringify(locals.sdgs) || {} %> }, '<%- locals.metadata.page.lang %>', true))

	// d3.select('.media-input-group #input-meta-tags')
	// .on('click', _ => addTags({ themes: <%- JSON.stringify(locals.themes) || {} %> }, '<%- locals.metadata.page.lang %>', true))
	// .on('touchend', _ => addTags({ themes: <%- JSON.stringify(locals.themes) || {} %> }, '<%- locals.metadata.page.lang %>', true))

	d3.select('.media-input-group #input-meta-sdgs')
	.on('click', _ => addSDGs({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addSDGs({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	// d3.select('.meta-input-group #input-meta-tags')
	d3.select('.media-input-group #input-meta-tags')
	.on('click', _ => addTags({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addTags({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-meta-skills')
	.on('click', _ => addSkills({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addSkills({ lang: '<%- locals.metadata.page.lang %>', focus: true }))

	d3.select('.media-input-group #input-meta-datasources')
	.on('click', _ => addDataSources({ lang: '<%- locals.metadata.page.lang %>', focus: true }))
	.on('touchend', _ => addDataSources({ lang: '<%- locals.metadata.page.lang %>', focus: true }))


	// ADD INTERACTIONS WITH DEPLOYMENT OPTIONS
	d3.select('.foot .deploy ul li a#template-deploy')
	.on('click', _ => {
		const message = 'Mobilize:' // TO DO: TRANSLATE
		const form = { action: '#', method: 'GET' }
		const opts = (<%- JSON.stringify(locals.cohort) %>).map(c => {
			return { node: 'input', type: 'checkbox', name: 'cohort', label: c.name, value: c.id }
		})
		const foot = { node: 'button', type: 'submit', label: 'Deploy' }

		renderContactList({ message: message, formdata: form, opts: opts, foot: foot })
	})


	
	var lang = '<%- locals.metadata.page.lang %>'; // THIS NEEDS TO BE A GLOBAL VARIABLE
	

	let activity = '<%- locals.metadata.page.activity %>';
	let published = false
	const editing = ['contribute', 'edit'].includes(activity)

	const main = d3.select('main')
	const head = main.select('.head')
	const body = main.select('.body')
	const descriptionLayout = body.select('.description-layout')
	// const mediaLayout = body.select('.media-layout')
	// const metaLayout = body.select('.meta-layout')
	const foot = main.select('.foot')
	const footer = d3.select('footer')


	head.select('.title')
	.on('keydown', function () {
		const evt = d3.event
		if (evt.code === 'Enter' || evt.keyCode === 13) {
			evt.preventDefault()
			this.blur()
		}
	})
	
	let keyTrack = []
	window.addEventListener('keydown', function (e) {
		e = e || event
		keyTrack.push(e.keyCode)

		if (editing) {
			// SHIFT + ENTER LEAVES THE FOCUSED CELL
			if (keyTrack.includes(16) && e.keyCode === 13 
				&& main.selectAll('.media-container.focus, .meta-container.focus').size()
			) { 	
				e.preventDefault()
				main.selectAll('.media-container, .meta-container').classed('focus', false)
					.selectAll('.media-title, .media-txt, .media-embed, .media-checklist .list-item, .media-checklist .instruction, .media-radiolist .list-item, .media-radiolist .instruction, .meta-checklist .instruction')
					.each(function () { this.blur() })
				main.selectAll('.media-container .inset, .meta-container .inset').style('max-height', null)
				autofillTitle()
			}
			// PROVIDE HIGHLIGHT FEEDBACK
			if (
				![head.selectAll('div.title').nodes(), main.selectAll('.section-header label').nodes(), main.selectAll('input[type=text], input[type=number]').nodes()].flat().includes(document.activeElement)
				&& !(main.selectAll('.layout.focus *:focus').size())
				&& !(main.selectAll('.media-container.focus, .meta-container.focus').size() || 
					main.selectAll('.media-container *:focus, .meta-container *:focus').size())
				&& !d3.select('.modal').node()
			) {
				if (e.key === 'i' || e.keyCode === 73) main.select('.media-input-group label[for=input-media-img]').classed('highlight', true)
				if (e.key === 'd' || e.keyCode === 68) main.select('.media-input-group label[for=input-media-drawing]').classed('highlight', true)
				if (e.key === 't' || e.keyCode === 84) main.select('.media-input-group label[for=input-media-txt]').classed('highlight', true)
				if (e.key === 'l' || e.keyCode === 76) main.select('.media-input-group label[for=input-media-checklist]').classed('highlight', true)
				if (e.key === 'r' || e.keyCode === 82) main.select('.media-input-group label[for=input-media-radiolist]').classed('highlight', true)
				if (e.key === 'e' || e.keyCode === 69) main.select('.media-input-group label[for=input-media-embed]').classed('highlight', true)
			}
		}
	})
	window.addEventListener('keyup', function (e) {
		e = e || event

		if (editing) {
			if (
				![head.selectAll('div.title').nodes(), main.selectAll('.section-header label').nodes(), main.selectAll('input[type=text], input[type=number]').nodes()].flat().includes(document.activeElement)
				&& !(main.selectAll('.layout.focus *:focus').size())
				&& !(main.selectAll('.media-container.focus, .meta-container.focus').size() || 
					main.selectAll('.media-container *:focus, .meta-container *:focus').size())
				&& !d3.select('.modal').node() // THIS IS IF WE ADD THE MODAL FOR SELECTING A COHORT
			) {
				if (e.key === 'i' || e.keyCode === 73) {
					main.select('label[for=input-media-img]').classed('highlight', false)
					d3.select('#input-media-img').node().click()
				}
				if (e.key === 'd' || e.keyCode === 68) {
					main.select('label[for=input-media-drawing]').classed('highlight', false)
					d3.select('#input-media-drawing').node().click()
				}
				if (e.key === 't' || e.keyCode === 84) {
					main.select('label[for=input-media-txt]').classed('highlight', false)
					d3.select('#input-media-txt').node().click()
				}
				if (e.key === 'l' || e.keyCode === 76) {
					main.select('label[for=input-media-checklist]').classed('highlight', false)
					d3.select('#input-media-checklist').node().click()
				}
				if (e.key === 'r' || e.keyCode === 82) {
					main.select('label[for=input-media-radiolist]').classed('highlight', false)
					d3.select('#input-media-radiolist').node().click()
				}
				if (e.key === 'e' || e.keyCode === 69) {
					main.select('label[for=input-media-embed]').classed('highlight', false)
					d3.select('#input-media-embed').node().click()
				}
			} else {
				switchButtons('<%- locals.metadata.page.lang %>')
			}
		}

		keyTrack = keyTrack.filter(d => d !== e.keyCode)
	})
	window.addEventListener('mouseup', function (e) {
		e = e || event
		if (editing) {
			// console.log(e.target)
			const target = d3.select(e.target)
			const media = target.findAncestor('media')
			const meta = target.findAncestor('meta')
			const section = target.findAncestor('layout')
			const inputgroup = target.findAncestor('input-group')
			if (!inputgroup) {
				main.selectAll('.layout').filter(function () { return section ? this !== section.node() : true })
					.classed('focus', false)
			}
			const containers = main.selectAll('.media-container, .meta-container')
				.filter(function () { 
					if (media) return this !== media.node()
					else if (meta) return this !== meta.node()
					else if (d3.select(this).classed('group-container focus') && inputgroup) return false
					else return true
				})
			containers.classed('focus', false)
				.selectAll('.inset')
				.style('max-height', null)
			main.selectAll('.media-input-group label, .meta-input-group label').classed('highlight', false)
			autofillTitle()
		}
	})

	function retrieveItems (sel, datum, items) {
		// MEDIA
		if (datum.type === 'title') {
			datum.instruction = sel.select('.media-title').node().innerText
			items.push(datum)
		}
		else if (datum.type === 'img') {
			datum.instruction = sel.select('.media-img').node().innerText
			items.push(datum)
		}
		else if (datum.type === 'drawing') {
			datum.instruction = sel.select('.media-drawing').node().innerText
			items.push(datum)
		}
		else if (datum.type === 'txt') {
			datum.instruction = sel.select('.media-txt').node().innerText
			items.push(datum)
		}
		else if (datum.type === 'embed') {
			datum.instruction = sel.select('.media-embed').node().innerText
			items.push(datum)
		}
		else if (datum.type === 'checklist') {
			datum.instruction = sel.select('.media-checklist .instruction').node().innerText
			datum.options = datum.options.filter(b => b.name && b.name.length)
			items.push(datum)
		}
		else if (datum.type === 'radiolist') {
			datum.instruction = sel.select('.media-radiolist .instruction').node().innerText
			datum.options = datum.options.filter(b => b.name && b.name.length)
			items.push(datum)
		}
		// META
		// else if (datum.type === 'location') {
		// 	datum.instruction = sel.select('.meta-location').node().innerText
		// 	items.push(datum)
		// }
		else if (datum.type === 'sdgs') {
			datum.instruction = sel.select('.meta-sdgs').node().innerText
			// datum.options = sel.selectAll('.inset-sdgs .panel .opt').data()
			// WE DO NOT KEEP A COPY HERE OF ALL sdgs
			items.push({ type: datum.type, level: datum.level, instruction: datum.instruction, constraint: datum.constraint, required: datum.required })
		}
		else if (datum.type === 'tags') {
			datum.instruction = sel.select('.meta-tags').node().innerText
			// datum.options = sel.selectAll('.inset-tags .panel .opt').data()
			// WE DO NOT KEEP A COPY HERE OF ALL tags
			items.push({ type: datum.type, level: datum.level, instruction: datum.instruction, constraint: datum.constraint, required: datum.required })
		}
		else if (datum.type === 'skills') {
			datum.instruction = sel.select('.meta-skills').node().innerText
			// datum.options = sel.selectAll('.inset-tags .panel .opt').data()
			// WE DO NOT KEEP A COPY HERE OF ALL tags
			items.push({ type: datum.type, level: datum.level, instruction: datum.instruction, constraint: datum.constraint, required: datum.required })
		}
		else if (datum.type === 'datasources') {
			datum.instruction = sel.select('.meta-datasources').node().innerText
			// datum.options = sel.selectAll('.inset-tags .panel .opt').data()
			// WE DO NOT KEEP A COPY HERE OF ALL tags
			items.push({ type: datum.type, level: datum.level, instruction: datum.instruction, constraint: datum.constraint, required: datum.required })
		}
	}

	function compileContent (attr) {
		const content = {}
		// COLLECT TITLE
		const title = head.select('.title').node().innerText
		const description = descriptionLayout.select('.media-container .media-txt').node().innerText
		// MAYBE INCLUDE ALERT IF title IS EMPTY
		// COLLECT ALL MEDIA
		const sections = []
		main.selectAll('.layout:not(.description-layout)')
		.each(function (d) {
			const items = []
			const sel = d3.select(this)
			sel.selectAll('.media-container, .meta-container')
			.each(function (c) {
				const sel = d3.select(this)
				const ingroup = sel.findAncestor('group-container')	
				// GROUPS
				if (c.type === 'group') {
					const groupitems = []
					sel.selectAll('.media-group-items .media-container, .media-group-items .meta-container')
						.each(function (b) { retrieveItems(d3.select(this), b, groupitems) })
					c.instruction = sel.select('.media-group').node().innerText
					c.structure = groupitems
					items.push(c)
				} else {
					if (!ingroup) retrieveItems(sel, c, items)
				}
			})

			d.title = sel.select('.section-header label').node().innerText
			d.lead = (sel.select('.media-lead').node() || {}).innerText
			d.instruction = (sel.select('.media-repeat button div').node() || {}).innerText
			d.structure = items
			sections.push(d)
		})

		console.log(sections)
		console.log(sections.map(d => d.structure).flat())

		// COMPILE FULL TXT FOR SEARCH
		const fullTxt = `${title}\n\n
			${description}\n\n
			${sections.map(d => d.title).join('\n\n').trim()}\n\n
			${sections.map(d => d.lead).join('\n\n').trim()}\n\n
			${sections.map(d => d.structure).flat().filter(d => d.type === 'title')
				.map(d => d.instruction).join('\n\n').trim()}\n\n
			${sections.map(d => d.structure).flat().filter(d => d.type === 'txt')
				.map(d => d.instruction).join('\n\n').trim()}\n\n
			${sections.map(d => d.structure).flat().filter(d => d.type === 'embed')
				.map(d => d.instruction).join('\n\n').trim()}\n\n
			${sections.map(d => d.structure).flat().filter(d => d.type === 'checklist')
				.map(d => d.instruction).join('\n\n').trim()}\n\n
			${sections.map(d => d.structure).flat().filter(d => d.type === 'checklist')
				.map(d => d.options.map(c => c.name)).flat().join('\n\n').trim()}
			${sections.map(d => d.structure).flat().filter(d => d.type === 'radiolist')
				.map(d => d.instruction).join('\n\n').trim()}\n\n
			${sections.map(d => d.structure).flat().filter(d => d.type === 'radiolist')
				.map(d => d.options.map(c => c.name)).flat().join('\n\n').trim()}
			${sections.map(d => d.structure).flat().filter(d => d.type === 'group').map(d => d.structure)
				.filter(d => d.type === 'txt')
				.map(d => d.txt).join('\n\n').trim()}\n\n
			${sections.map(d => d.structure).flat().filter(d => d.type === 'group').map(d => d.structure)
				.filter(d => d.type === 'embed')
				.map(d => d.html).join('\n\n').trim()}\n\n
			${sections.map(d => d.structure).flat().filter(d => d.type === 'group').map(d => d.structure)
				.filter(d => d.type === 'checklist')
				.map(d => d.options.filter(c => c.checked).map(c => c.name)).flat().join('\n\n').trim()}
			${sections.map(d => d.structure).flat().filter(d => d.type === 'group').map(d => d.structure)
				.filter(d => d.type === 'radiolist')
				.map(d => d.options.filter(c => c.checked).map(c => c.name)).flat().join('\n\n').trim()}`
			// TO DO: REPLICATE ABOVE FOR GROUPS
		
		// COMPILE THE CONTENT
		// if (!attr || attr === 'title') content.title = title
		content.title = title // ALWAYS SAVE THE TITLE
		if (!attr || attr === 'description') content.description = description
		if (!attr || ['lead', 'media', 'meta'].includes(attr) || sections.map(d => d.structure).flat().unique('type', true).includes(attr)) { content.sections = JSON.stringify(sections)
		}
		// ALWAYS SEND fullTxt
		content.full_text = fullTxt

		// // TO DO: SEE IF THERE IS A BETTER WAY TO DO THIS
		// // ALWAYS SEND status
		let status = 0
		if (!published) {
			if (title && title.trim().length) status = 1
		} else status = 2
		content.status = status

		return content
	}

	function partialSave (attr) {
		console.log('saving')
		// FIRST CHECK IF THIS IS A NEW TEMPLATE
		// CHECK IF THE PAD ALREADY HAS AN id IN THE DB
		const url = new URL(window.location)
		const queryparams = new URLSearchParams(url.search)
		const id = queryparams.get('id')
		const source = queryparams.get('source')
		// IF IT HAS, THEN FOR THE FIRST SAVE, COMPILE EVERYTHING IN CASE IT IS A COPY OF A TEMPLATE
		let content
		if (id) {
			content = compileContent(attr)
			content.id = +id
		}
		else {
			content = compileContent()
			if (source) content.source = +source
		}

		POST('/save/template', content)
		.then(res => {
			// ADD THE NOTIFICATION
			const header = d3.select('header ul.primary')
			header.select('.placeholder').classed('saved', true)
				.select('a button')
				.html(vocabulary['changes saved'][lang])
			window.setTimeout(_ => {
				header.select('.placeholder').classed('hide', true)
				header.selectAll('li:not(.placeholder)').classed('hide', false)
			}, 1000)
			// CHANGE THE URL TO INCLUDE THE PAD ID
			if (!id) { // INSERT
				queryparams.append('id', res.object)
				url.search = queryparams.toString()
				// BASED ON:
				// https://usefulangle.com/post/81/javascript-change-url-parameters
				// https://www.30secondsofcode.org/blog/s/javascript-modify-url-without-reload
				const nextURL = url.toString().replace('contribute', 'edit')
				const nextTitle = 'Update template'
				const nextState = { additionalInformation: 'Updated the URL with JS' }
				window.history.pushState(nextState, nextTitle, nextURL)
				// REMOVE THE templates MENU
				d3.select('nav#filter').remove()
			}
		}).catch(err => { throw err })
	}

	// POPULATE THE PAGE
	// if (['edit', 'view'].includes(activity)) {
	<% if (locals.data) { %>
		const data = <%- JSON.stringify(locals.data || {}) %>;
		console.log(data)
		if (activity === 'contribute') data.title = `[Copy] ${data.title}` // THIS IS A COPIED TEMPLATE

		published = data.published

		head.select('.title').html(data.title)
		descriptionLayout.select('.media-container .media-txt').text(data.description)
		if (data.sections) {
			data.sections.forEach(d => {
				addSection({ data: d, lang: '<%- locals.metadata.page.lang %>' })
				// d.structure.forEach(c => populateSection(c, '<%- locals.metadata.page.lang %>', section))
			})
		}
		// CLEAR CHANGES
		window.sessionStorage.removeItem('changed-content')
	<% } else { %>
		addSection({ lang: '<%- locals.metadata.page.lang %>' })
		addTitle({ lang: '<%- locals.metadata.page.lang %>' })
		// CLEAR CHANGES
		window.sessionStorage.removeItem('changed-content')
	<% } %>

</script>
</body>
</html>